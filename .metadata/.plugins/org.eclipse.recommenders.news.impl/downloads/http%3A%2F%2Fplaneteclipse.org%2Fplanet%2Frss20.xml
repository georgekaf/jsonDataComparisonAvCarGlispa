<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>PapyrusUML: Papyrus for Real Time is born!</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=759</guid>
	<link>https://papyrusuml.wordpress.com/2017/07/21/papyrus-for-real-time-is-born/</link>
	<description>&lt;p&gt;ME-RT (a.k.a., Papyrus for Real Time, a.k.a., Papyrus-RT) was first presented/announced at &lt;a href=&quot;http://www.eclipsecon.org/europe2014/index.html&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;EclipseCon North America 2014&lt;/a&gt;. In the 1220 days Since then, work my minions have worked tirelessly to finally releasing v1.0 yesterday.¬†Papyrus-RT is now officially out of incubation! This ‚Äúbirth‚Äù (Papyrus-RT did break out of the incubation ‚Äúegg‚Äù‚Ä¶) was even announced during the quartery &lt;a href=&quot;https://www.youtube.com/watch?v=3V9jVS9yutY&quot;&gt;Eclipse Foundation members meeting&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;You can find all the nitty-gritty of this release &lt;a href=&quot;https://wiki.eclipse.org/Papyrus-RT/Releases#Papyrus-RT_MVP2.1_.28v1.0.29_-_Better_behave_with_Oxygen.21&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Congratulations to all my minions from CEA, EclipseSource, Ericsson,¬†Zeligsoft, and all others who have contributed their time, work, and support for all their great contributions in bringing out a new offering in my growing product line!&lt;/p&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://eclipse.org/papyrus-rt/content/download.php&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Click here to start your free trial!&lt;/a&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;h6 style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;hint: it‚Äôs open source! It was free, it is free, and it will continue be free &lt;img alt=&quot;üòâ&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f609.png&quot; style=&quot;height: 1em;&quot; /&gt;¬† &lt;/strong&gt;&lt;/h6&gt;&lt;br /&gt;Filed under: &lt;a href=&quot;https://papyrusuml.wordpress.com/category/papyrus-rt/&quot;&gt;Papyrus-RT&lt;/a&gt; Tagged: &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/papyrus-rt-2/&quot;&gt;papyrus-rt&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/release/&quot;&gt;release&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/papyrusuml.wordpress.com/759/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/papyrusuml.wordpress.com/759/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/papyrusuml.wordpress.com/759/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/delicious/papyrusuml.wordpress.com/759/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/papyrusuml.wordpress.com/759/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/facebook/papyrusuml.wordpress.com/759/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/papyrusuml.wordpress.com/759/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/twitter/papyrusuml.wordpress.com/759/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/papyrusuml.wordpress.com/759/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/stumble/papyrusuml.wordpress.com/759/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/papyrusuml.wordpress.com/759/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/digg/papyrusuml.wordpress.com/759/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/papyrusuml.wordpress.com/759/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/reddit/papyrusuml.wordpress.com/759/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=papyrusuml.wordpress.com&amp;amp;blog=72365150&amp;amp;post=759&amp;amp;subd=papyrusuml&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 21 Jul 2017 17:11:19 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: EMF Support for Che ‚Äì Day 5: Create a plugin and register a file type</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=35027</guid>
	<link>https://eclipsesource.com/blogs/2017/07/21/emf-support-for-che-day-5/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In this blog series, we share our experiences extending &lt;/span&gt;&lt;a href=&quot;http://eclipse.org/che&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse Che&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; to add EMF support. The &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/02/08/emf-support-for-che-day-0-motivation-and-getting-started/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;first post&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; covered our goals. In previous posts, we describe how to &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/02/23/emf-support-for-che-day-2-generating-code/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;add support for code generation&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/03/01/emf-support-for-che-day-3-adding-a-custom-workspace-stack/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;create a custom stack&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, and &lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2017/03/15/emf-support-for-che-day-4-building-che/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;how to build che&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. It has been quite a while since our last blog, but now we would like to continue with the next step.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Our next major goal is to add a custom editor to Che capable of editing EMF models (Ecore files). To do so, we will first create a custom plugin for Che, so that we do not mix our custom extension code with the core code base of Che. In our first plugin, we will add two extensions to Che: Registering .ecore as a custom file type and registering a custom Editor for this file type. We will describe those first two extensions in detail, as they will provide a good template for later extensions.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Plugins in Che are basically maven modules, that we add to our custom build. Please note that Che does not have a runtime plugin mechanism (see &lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2017/03/15/emf-support-for-che-day-4-building-che/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;the last post&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; for more details).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We could integrate the module manually into the Che build however that would require some manual work. Fortunately, Eclipse Che provides an easy-to-use solution using maven archtypes to generate a simple plugin which can be used as a basis for your own plugin.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The following description is based on the current version (5.13.0) of Eclipse Che. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Please execute the following steps:&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Clone ‚Äúgit clone&lt;/span&gt;&lt;a href=&quot;https://github.com/eclipse/che-archetypes.git&quot;&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;https://github.com/eclipse/che-archetypes.git&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;‚Äú&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Change into cloned directory&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Checkout Tag 5.13 ‚Äúgit checkout tags/5.13.0‚Äù&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Execute the following command&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;mvn org.apache.maven.plugins:maven-archetype-plugin:2.4:generate -DarchetypeRepository=http://maven.codenvycorp.com/content/groups/public/ -DarchetypeGroupId=org.eclipse.che.archetype -DarchetypeArtifactId=plugin-menu-archetype -DarchetypeVersion=5.13.0 -DgroupId=my.plugin -DartifactId=my-sample-plugin -Dversion=0.1-SNAPSHOT -DskipITs -DinteractiveMode=false&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;This will generate a sample plugin into the ‚Äúmy-sample-plugin‚Äù directory. The sample contains a menu item triggering a ‚ÄúHello from Che!!!‚Äù output. You can browse the plugin directory to learn more about the sample code.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;To build the sample plugin with Che switch into ‚Äúmy-sample-plugin‚Äù directory and execute: &lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;mvn clean install&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Finally, to run the built Plugin with Che execute the following command in the ‚Äúmy-sample-plugin‚Äù directory ($PWD points to the current directory):&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;docker run -it --rm -v /var/run/docker.sock:/var/run/docker.sock -v $PWD/mydata:/data -v $PWD/assembly-che/assembly-main/target/eclipse-che-0.1-SNAPSHOT/eclipse-che-0.1-SNAPSHOT:/assembly eclipse/che-cli:5.13.0 start&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Now, open your browser at ‚Äúhttp://localhost:8080‚Äù and create a new workspace. You can see the generated sample menu and action.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone wp-image-35033 size-large&quot; height=&quot;186&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2017/07/image10-1024x186.png&quot; width=&quot;1024&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Now that we have a running plugin, lets come back to our original goal- EMF support in Che. We will use the plugin to add some extensions to Che: a custom file type and a custom editor.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Currently, without any extension, Che shows a generic file icon for the ‚Äú.ecore‚Äù extension:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone wp-image-35036 size-full&quot; height=&quot;268&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2017/07/image13.png&quot; width=&quot;608&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As a next example, we want to register the file extension ‚Äú.ecore‚Äù and display an appropriate icon.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;First we add our icon to the plugin directory ‚Äúmy-sample-plugin/plugins/my-sample-plugin/my-sample-plugin-ide/src/main/resources‚Äù.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Now, we need to load the icon in GWT. To do so, we create a ¬†new interface ‚ÄúIconResource.java‚Äù in the ‚Äúmy.plugin.ide‚Äù package with the following content:&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;package my.plugin.ide;

import com.google.gwt.core.client.GWT;
import com.google.gwt.resources.client.ClientBundle;
import org.vectomatic.dom.svg.ui.SVGResource;

public interface IconResource extends ClientBundle {
   IconResource INSTANCE = GWT.create(IconResource.class);

   @Source(&quot;icon.svg&quot;)
   SVGResource icon();
}&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Since we added a dependency to ‚Äúorg.vectomatic.dom.svg‚Äù we need to add this dependency in the ‚Äúmy-sample-plugin-ide/pom.xml‚Äù &lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;   org.vectomatic
   lib-gwt-svg
   0.5.12
&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Now, we define our custom file type and add it to the generated Gin module. Open ‚ÄúSampleMenuGinModule.java‚Äù and add the following code, which is basically a factory for the custom file type. The file type defines the icon as well as the file extension.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Once this is added, we can have the new file type injected in any other class using dependency injection.&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;@Provides
@Singleton
@Named(&quot;EcoreFileType&quot;)
protected FileType provideEcoreFile(IconResource res) {
   return new FileType(res.icon(), &quot;ecore&quot;);
}&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Finally, we need to register the file type and register an editor for it. For now, we will just register the default text editor of Che, we will use this code later to register our own custom editor.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;To do the registration, we create a new java class ‚ÄúMyEditorExtension.java‚Äù. Those extension classes are the central place of plugins to interact with Che. This allows it to handle all registrations of things like file types and editors, but also actions, views, etc.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The annotation ‚Äú@Extension‚Äù tells Che, that this class provides extensions. All methods will be executed via dependency injection, allowing you to inject all required parameters and services. In the following example, we inject two Che services, the editor registry and the file type registry, as well as our custom file type. First, we add our custom file type to the file type registry, second, we associate our custom file type with the default text editor.&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;@Extension(title = &quot;Ecore Editor&quot;)
public class MyEditorExtension {
   @Inject
   public void registerForFiletype(final EditorRegistry editorRegistry,
                                   final FileTypeRegistry fileTypeRegistry,
                                   final @Named(&quot;EcoreFileType&quot;) FileType ecoreFile,
                                   final DefaultTextEditorProvider provider
                                   ){
       fileTypeRegistry.registerFileType(ecoreFile);
       editorRegistry.registerDefaultEditor(ecoreFile,provider);
   }
}&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Once we rebuilt Che, all files using the file extension ‚Äú.ecore‚Äù will use the custom icon and will open the default text editor:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone wp-image-35035 size-full&quot; height=&quot;312&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2017/07/image5.png&quot; width=&quot;867&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In this blog post, we have created a plugin for Che that allows us to add customizations without mixing our code with the Che code based. So far, the customizations were simple, we added an icon and registered the existing default editor. However, our original goal was to add a custom editor, which is capable of modifying an Ecore file just the way you are used to in the Eclipse Desktop IDE. There are several possible ways to develop such an editor, which we will discuss this in the next part of this blog series.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So stay tuned!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If you are interested in learning more about the prototype for EMF support, if you want to contribute or sponsor its further development, or if you want support for creating your own extension for Che, please feel free to &lt;/span&gt;&lt;a href=&quot;mailto:munich@eclipsesource.com&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;contact us&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;¬†&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;List of all available days to date:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2017/02/08/emf-support-for-che-day-0-motivation-and-getting-started/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Day 0&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2017/02/14/emf-support-for-che-day-1-run-che-and-import-existing-emf-project/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Day 1&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2017/02/23/emf-support-for-che-day-2-generating-code/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Day 2&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2017/03/01/emf-support-for-che-day-3-adding-a-custom-workspace-stack/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Day 3&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2017/03/15/emf-support-for-che-day-4-building-che/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Day 4&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2017/07/21/emf-support-for-che-day-5&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Day 5&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;¬†&lt;/p&gt;
&lt;p&gt;¬†&lt;/p&gt;
&lt;p&gt;¬†&lt;/p&gt;
&lt;p&gt;¬†&lt;/p&gt;
&lt;p&gt;¬†&lt;/p&gt;
&lt;p&gt;¬†&lt;/p&gt;</description>
	<pubDate>Fri, 21 Jul 2017 08:23:58 +0000</pubDate>
</item>
<item>
	<title>Paolo Patierno: A lot of fun with ‚Ä¶ AMQP, Spark, Kafka, EnMasse, MQTT, Vert.x &amp; IoT</title>
	<guid isPermaLink="false">http://paolopatierno.wordpress.com/?p=5120</guid>
	<link>https://paolopatierno.wordpress.com/2017/07/21/a-lot-of-fun-with-amqp-spark-kafka-enmasse-mqtt-vert-x-iot/</link>
	<description>&lt;p style=&quot;text-align: justify;&quot;&gt;When I say to someone that I work for Red Hat they say me ‚ÄúAh ! Are you working on Linux ?‚Äù ‚Ä¶ No, no, no and ‚Ä¶ no ! I‚Äôm not a Linux guy, I‚Äôm not a fan boy but I‚Äôm just a daily user &lt;img alt=&quot;üôÇ&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;All people know that Red Hat is THE company which provides the best enterprise Linux distribution well known as Red Hat Enterprise Linux (RHEL) but Red Hat is not only Linux today. Its portfolio is huge : the cloud and containers business with the OpenShift effort, the microservices offer with Vert.x, Wildfly Swarm, Spring Boot, the IoT world with the involvement in the main Eclipse Foundation projects.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;The objective of this blog is just showing briefly the projects I worked (or I‚Äôm working) on since last year when I was hired on March 1st. They are not ‚Äúmy‚Äù projects, they are projects I‚Äôm involved because the entire team is working on them ‚Ä¶ collaboration, you know &lt;img alt=&quot;üôÇ&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;You could be surprised about that but ‚Ä¶ there is no Linux ! I‚Äôm on the messaging &amp;amp; IoT team, so you will see only projects about this stuff &lt;img alt=&quot;üôÇ&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;h2 style=&quot;text-align: justify;&quot;&gt;AMQP ‚Äì Apache Spark connector&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;This ‚Äúlittle‚Äù component is strictly related to the ‚Äúbig‚Äù &lt;a href=&quot;https://radanalytics.io/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;radanalytics.io&lt;/a&gt; project which takes the powerful of &lt;a href=&quot;https://spark.apache.org/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Apache Spark&lt;/a&gt; for analytics (batch, real-time, machine learning, ‚Ä¶) running on &lt;a href=&quot;https://www.openshift.com/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;OpenShift&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Because the messaging team works mainly on projects like &lt;a href=&quot;https://activemq.apache.org/artemis/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;ActiveMQ Artemis&lt;/a&gt; and the &lt;a href=&quot;http://qpid.apache.org/components/dispatch-router/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Qpid Dispatch Router&lt;/a&gt;, where the main protocol is AMQP 1.0, the idea was developing a connector for Spark Streaming in order to ingest data through this protocol so from queues/topics on a broker or through the router in a direct messaging fashion.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;You can find the component &lt;a href=&quot;https://github.com/radanalyticsio/streaming-amqp&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; and even an IoT demo &lt;a href=&quot;https://github.com/ppatierno/enmasse-spark-demo&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;¬†which shows how it‚Äôs possible to ingest data through AMQP 1.0 using the EnMasse project (see below) and then executing a real time streaming analytics with Spark Streaming, all running on Kubernetes and OpenShift.&lt;/p&gt;
&lt;h2 style=&quot;text-align: justify;&quot;&gt;AMQP ‚Äì Apache Kafka bridge&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;a href=&quot;https://kafka.apache.org/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Apache Kafka&lt;/a&gt; is one of the best technologies used today for ingesting data (i.e. IoT related scenarios) with an high throughput. Even in this case, the idea was providing a way for having AMQP 1.0 clients and JMS clients pushing messages to Apache Kafka topics without knowing the related custom protocol.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;In this way, if you have such clients because you are already using a broker technology but then you need some specific Kafka features (i.e. re-reading streams), you can just switch the messaging system (from the broker to Kafka) and using the bridge you don‚Äôt need to update or modify clients. I showed how this is possible at the Red Hat summit as well and the related demo is available &lt;a href=&quot;https://github.com/ppatierno/amqp-kafka-demo&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 style=&quot;text-align: justify;&quot;&gt;MQTT on EnMasse&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;a href=&quot;http://enmasse.io&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;EnMasse&lt;/a&gt; is an open source messaging platform, with focus on scalability and performance. It can run on your own infrastructure (on premise) or in the cloud, and simplifies the deployment of messaging infrastructure.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;It‚Äôs based on other open source projects like ActiveMQ Artemis and Qpid Dispatch Router supporting the AMQP 1.0 protocol natively.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;In order to provide support for the MQTT protocol, we designed how to take &lt;a href=&quot;https://github.com/EnMasseProject/enmasse/blob/master/documentation/mqtt-over-amqp/README.md&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;‚ÄúMQTT over AMQP‚Äù&lt;/a&gt; so having MQTT features on the AMQP protocol. From the design we moved to develop two main components :&lt;/p&gt;
&lt;ul style=&quot;text-align: justify;&quot;&gt;
&lt;li&gt;the &lt;a href=&quot;https://github.com/EnMasseProject/enmasse/tree/master/mqtt/mqtt-gateway&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;MQTT gateway&lt;/a&gt; which handles connections with remote MQTT clients translating all messages from MQTT to AMQP and vice versa;&lt;/li&gt;
&lt;li&gt;the &lt;a href=&quot;https://github.com/EnMasseProject/enmasse/tree/master/mqtt/mqtt-lwt&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;MQTT LWT&lt;/a&gt; (Last and Will Testament) service which provides a way for notifying all clients connected to EnMasse that another client is suddenly died sending them its ‚Äúwill message‚Äù. The great thing about this service, is that it works with pure AMQP 1.0 clients so bringing the LWT feature on AMQP as well : for this reason the team is thinking to change its name just in AMQP LWT service.&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;EnMasse is great for IoT scenarios in order to handle a huge number of connections and ingesting a lot of data using AMQP and MQTT as protocols. I used it in all my IoT demos for showing how it‚Äôs possible to integrate it with streaming and analytics frameworks. It‚Äôs also the main choice as messaging infrastructure in the cloud for the Eclipse Hono project.&lt;/p&gt;
&lt;h2 style=&quot;text-align: justify;&quot;&gt;Vert.x and the IoT components&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;a href=&quot;http://vertx.io&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Vert.x&lt;/a&gt; is a great toolkit for developing reactive applications running on a JVM.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;The reactive applications manifesto fits really well for IoT scenarios where responsiveness, resiliency, elasticity and the communication driven by messages are the pillars of all the IoT solutions.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Starting to work on the MQTT gateway for EnMasse using Vert.x for that, I decided to develop an &lt;a href=&quot;https://github.com/vert-x3/vertx-mqtt-server&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;MQTT server&lt;/a&gt; that was just able to handle communication with remote clients providing an API for interacting with them : this component was used for bridging MQTT to AMQP (in EnMasse) but can be used for any scenario where a sort of protocol translation or integration is needed (i.e. MQTT to Vert.x Event Bus, to Kafka, ‚Ä¶). Pay attention, it‚Äôs not a full broker !&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;The other component was the Apache &lt;a href=&quot;https://github.com/vert-x3/vertx-kafka-client&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Kafka client&lt;/a&gt;, mainly developed by Julien Viet (lead on Vert.x) and then passed to me as maintainer for improving it and adding new features from the first release.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Finally, thanks to the Google Summer of Code, during the last 2 months I have been mentoring a student who is working on developing a Vert.x native &lt;a href=&quot;https://github.com/vert-x3/vertx-mqtt-client&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;MQTT client&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;As you can see the Vert.x toolkit is really growing from an IoT perspective other then providing a lot of components useful for developing pure microservices based solutions.&lt;/p&gt;
&lt;h2 style=&quot;text-align: justify;&quot;&gt;Eclipse Hono&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;a href=&quot;https://www.eclipse.org/hono/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Eclipse Hono&lt;/a&gt; is a project under the big &lt;a href=&quot;https://iot.eclipse.org/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Eclipse IoT&lt;/a&gt; umbrealla in the Eclipse Foundation. It provides a service interfaces for connecting large numbers of IoT devices to a back end and interacting with them in a uniform way regardless of the device communication protocol.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;It supports scalable and secure ingestion of large volumes of sensor data by means of its Telemetry API. The Command &amp;amp; Control API allows for sending commands (request messages) to devices and receive a reply to such a command from a device asynchronously in a reliable way.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;This project is mainly developed by Red Hat and Bosch and I gave my support on designing all the API other then implementing the MQTT adapter even in this case using the Vert.x MQTT server component.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Because Eclipse Hono works on top of a messaging infrastructure for allowing messages exchange, the main choice was using ActiveMQ Artemis and the Qpid Dispatch Router even running them using Kubernetes and OpenShift with EnMasse.&lt;/p&gt;
&lt;h2 style=&quot;text-align: justify;&quot;&gt;Apache Kafka&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Finally, I was involved to develop a POC named ‚Äú&lt;a href=&quot;https://github.com/EnMasseProject/barnabas&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;barnabas&lt;/a&gt;‚Äù (a messenger character from a Frank Kafka novel :-)) in order to take Apache Kafka running on OpenShift.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Considering the stetaful nature of a project like Kafka, I started when Kubernetes didn‚Äôt offer the StatefulSets feature doing something similar by myself. Today, the available deploy is based on StatefulSets and it‚Äôs a work in progress on which I‚Äôll continue to work for pushing the POC to the next level.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Apache Kafka is a really great project which has its own use cases in the messaging world; today it‚Äôs more powerful thanks to the new Streams API which allows to execute a real time streaming analytics using topics from your cluster and running simple applications. My next step is to move my EnMasse + Spark demo to an EnMasse + Kafka (and streaming) deployment. I‚Äôm also giving my support on the Apache Kafka code.&lt;/p&gt;
&lt;h2 style=&quot;text-align: justify;&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;The variety and heterogeneity of all the above projects is giving me a lot of fun in my day by day work even collaborating with different people with different knowledge. I like learning new stuff and the great thing is that ‚Ä¶ things to learn are endless ! &lt;img alt=&quot;üôÇ&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;¬†&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/paolopatierno.wordpress.com/5120/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/paolopatierno.wordpress.com/5120/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=paolopatierno.wordpress.com&amp;amp;blog=15467422&amp;amp;post=5120&amp;amp;subd=paolopatierno&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 21 Jul 2017 07:31:23 +0000</pubDate>
</item>
<item>
	<title>Wayne Beaton: License Certification (Mostly) Just Happens</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=4911</guid>
	<link>https://waynebeaton.wordpress.com/2017/07/19/license-certification-mostly-just-happens/</link>
	<description>&lt;p&gt;The &lt;a href=&quot;https://eclipse.org/org/documents/Eclipse_IP_Policy.pdf&quot;&gt;Eclipse Intellectual Property Policy&lt;/a&gt; defines two types of intellectual property (IP) due diligence for third party content. The so-called &lt;em&gt;Type A Due Diligence&lt;/em&gt; is concerned exclusively with license certification; and¬†&lt;em&gt;Type B Due Diligence&lt;/em&gt; is concerned with license certification, provenance checking and a deep dive scan of the content for various anomalies.&lt;/p&gt;
&lt;p&gt;Regarding the analysis of &lt;em&gt;Type A&lt;/em&gt; third party content, the IP Policy makes this statement:&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;&lt;em&gt;It will be the responsibility of the Eclipse Project to run and analyze the results of a scan tool provided by the EMO, using parameters provided by the EMO, to obtain the terms and conditions under which such Content would be distributed by the Eclipse Foundation, and ensure that such terms are consistent with the Project Licenses. The Eclipse Project will certify that the terms and conditions of its Non-Eclipse Content conform to the then-current licensing guidelines as provided by the EMO. No further approvals will be required from the EMO prior to the Eclipse Project placing the Non-Eclipse Content into the Repository.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In short, it is the project team‚Äôs responsibility to run a tool, analyse the results, and certify the content as being consistent with the various conditions. It took us a while to &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=499950&quot;&gt;identify the &lt;em&gt;scan tool&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Eclipse IP Team has been using open source &lt;a href=&quot;https://www.fossology.org/&quot;&gt;Fossology&lt;/a&gt; for a while. While Fossology is a very comprehensive tool that‚Äôs great for IP Analysts, our experience suggests that the learning curve is too steep for it to be used by committers. What we wanted to provide was a tool that could generate a simple report (both human and machine readable) containing a manifest and corresponding licensing.&lt;/p&gt;
&lt;p&gt;We found what we needed in &lt;a href=&quot;https://github.com/nexB/scancode-toolkit&quot;&gt;ScanCode&lt;/a&gt;, which is produced by some old friends at NexB. ScanCode has the ability to generate the manifest and summarize findings in a number of different formats, including HTML, JSON, and &lt;a href=&quot;https://spdx.org/&quot;&gt;SPDX&lt;/a&gt; RDF and Tag/Value. Using ScanCode is pretty easy. In fact, it‚Äôs so easy that the Webmaster integrated its use into an &lt;em&gt;Eclipse Genie&lt;/em&gt; script. So‚Ä¶ &lt;strong&gt;for a project team to run the tool, all they really need to do is create a CQ&lt;/strong&gt;. The rest just happens automatically.&lt;/p&gt;
&lt;div class=&quot;wp-caption aligncenter&quot; id=&quot;attachment_5018&quot; style=&quot;width: 551px;&quot;&gt;&lt;img alt=&quot;license-certification-workflow&quot; class=&quot; size-full wp-image-5018 aligncenter&quot; src=&quot;https://waynebeaton.files.wordpress.com/2017/07/license-certification-workflow1.png?w=640&quot; /&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;In cases where the third party content has a single white listed license, committers only need to create the CQ and then add the content to their builds. If Eclipse IP Team review is required, the committer may need to participate in that review.&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;To leverage this automatic scan, a project committer creates a &lt;em&gt;Type A&lt;/em&gt; &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#ip-cq&quot;&gt;contribution questionnaire&lt;/a&gt; (CQ) in the usual way and attaches the corresponding source code. The magic happens after the PMC gives their approval: the Eclipse Genie process identifies every Type A third party content CQs that has been approved by the PMC, runs ScanCode on the source code attachments, and then attaches the report directly to the CQ.&lt;/p&gt;
&lt;p&gt;If a &lt;em&gt;single license&lt;/em&gt; is identified for all files in the third party content, and that license is on our white list (see below), then the CQ is automatically marked &lt;em&gt;license_certified&lt;/em&gt;, its license information is updated, and the CQ is marked resolved. If multiple licenses, blacklisted licenses, or otherwise problematic licenses are detected (i.e. anything other a single white listed license), then the CQ is sent to the Eclipse IP Team for further investigation.&lt;/p&gt;
&lt;p&gt;When you see something like the following on your CQ, you‚Äôre good-to-go.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Screenshot from 2017-07-18 15-19-46&quot; class=&quot;  wp-image-4910 aligncenter&quot; height=&quot;387&quot; src=&quot;https://waynebeaton.files.wordpress.com/2017/07/screenshot-from-2017-07-18-15-19-46.png?w=489&amp;amp;h=387&quot; width=&quot;489&quot; /&gt;&lt;/p&gt;
&lt;p&gt;At this point, the content can be used in project builds and included in milestone builds. Once all project CQs are either marked as &lt;em&gt;license_certified&lt;/em&gt;¬†(type A) or &lt;em&gt;approved&lt;/em&gt; (type B), the project can do an official release.&lt;/p&gt;
&lt;p&gt;I‚Äôm really curious to see what sort of hit rate we get on automatic license certification, vs. how many requests will have to be reviewed by the Eclipse IP Team. My hope is that we will get to a point where we have an 80% automatic approval rate; but we don‚Äôt have enough data to make a call yet.&lt;/p&gt;
&lt;p&gt;Our current implementation has the following licenses in the &lt;em&gt;white list&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Apache License 2.0&lt;/li&gt;
&lt;li&gt;Apache License 1.0&lt;/li&gt;
&lt;li&gt;Apache License 1.1&lt;/li&gt;
&lt;li&gt;BSD 2 Clause&lt;/li&gt;
&lt;li&gt;BSD 3 Clause&lt;/li&gt;
&lt;li&gt;BSD 4 Clause&lt;/li&gt;
&lt;li&gt;Eclipse Public License 1.0&lt;/li&gt;
&lt;li&gt;Eclipse Distribution License 1.0&lt;/li&gt;
&lt;li&gt;MIT License&lt;/li&gt;
&lt;li&gt;ISC License&lt;/li&gt;
&lt;li&gt;NTP License&lt;/li&gt;
&lt;li&gt;OpenSSL License&lt;/li&gt;
&lt;li&gt;Public Domain&lt;/li&gt;
&lt;li&gt;SIL OPEN FONT LICENSE&lt;/li&gt;
&lt;li&gt;W3C Software and Notice License&lt;/li&gt;
&lt;li&gt;zlib license&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We need to &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=394613&quot;&gt;find a home&lt;/a&gt; for this. This list will grow.&lt;/p&gt;
&lt;p&gt;We‚Äôre using &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=496959&quot;&gt;Bug 496959&lt;/a&gt;¬†to track our work to update our processes and documentation regarding the Eclipse IP Process.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/waynebeaton.wordpress.com/4911/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/waynebeaton.wordpress.com/4911/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=waynebeaton.wordpress.com&amp;amp;blog=19425814&amp;amp;post=4911&amp;amp;subd=waynebeaton&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 19 Jul 2017 17:17:37 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: JBoss Tools 4.5.0.AM2 for Eclipse Oxygen.0</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/4.5.0.am2-for-oxygen.0.html</guid>
	<link>https://tools.jboss.org/blog/4.5.0.am2-for-oxygen.0.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Happy to announce 4.5.0.AM2 (Developer Milestone 2) build for Eclipse Oxygen.0.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Downloads available at &lt;a href=&quot;https://tools.jboss.org/downloads/jbosstools/oxygen/4.5.0.AM2.html&quot;&gt;JBoss Tools 4.5.0 AM2&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is New?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Full info is at &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.5.0.AM2.html&quot;&gt;this page&lt;/a&gt;. Some highlights are below.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;openshift-3&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#openshift-3&quot;&gt;&lt;/a&gt;OpenShift 3&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;openshift-server-and-kubernetes-server-versions-displayed&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#openshift-server-and-kubernetes-server-versions-displayed&quot;&gt;&lt;/a&gt;OpenShift server and Kubernetes server versions displayed&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The OpenShift server and Kubernetes server versions are now displayed in the OpenShift connection properties.
      This information is retrieved using an un-authenticated request login to the OpenShift cluster is not required.
      This allow user to verify the OpenShift and Kubernetes level when interacting.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Here is an example based on an OpenShift connection against CDK3:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;openshift k8s versions&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/openshift-k8s-versions.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;if the cluster is not started or accessible, then no values are displayed:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;openshift k8s versions1&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/openshift-k8s-versions1.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;docker&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#docker&quot;&gt;&lt;/a&gt;Docker&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;new-security-options&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#new-security-options&quot;&gt;&lt;/a&gt;New Security Options&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Support has been added when launching commands in a Container to specify a security option profile. This can be done in lieu of specifying privileged mode. For example, to run gdbserver, one can specify &quot;seccomp:unprofiled&quot; to allow ptrace commands to be run by the gdb server.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Run Image Wizard has been modified to allow specifying an unconfined seccomp profile to replace the default seccomp profile.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;LinuxToolsUnconfinedOption&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/docker/images/docker_oxygen0/LinuxToolsUnconfinedOption.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Security options are also now shown in the Properties View.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;LinuxToolsUnconfinedProperty&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/docker/images/docker_oxygen0/LinuxToolsUnconfinedProperty.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;fuse-tooling&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#fuse-tooling&quot;&gt;&lt;/a&gt;Fuse Tooling&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;bean-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#bean-support&quot;&gt;&lt;/a&gt;Bean Support&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We are happy to finally announce support for &lt;strong&gt;Beans&lt;/strong&gt; (Spring / Blueprint).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Using the Route Editor you can now access Spring / Blueprint Beans in your Camel Context through the &lt;strong&gt;Configurations&lt;/strong&gt; tab.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Configurations tab in Editor&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/beansupporteditortab.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In the &lt;strong&gt;Configurations&lt;/strong&gt; tab you can see all global configuration elements of your Camel Context. You can &lt;code&gt;Add&lt;/code&gt;, &lt;code&gt;Edit&lt;/code&gt; and &lt;code&gt;Delete&lt;/code&gt; elements using the buttons on the right side.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Configurations tab content&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/beancreated.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;By clicking the &lt;code&gt;Add&lt;/code&gt; or &lt;code&gt;Edit&lt;/code&gt; button a wizard will be openend to guide you on the creation of the Bean.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;New Bean wizard&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/newbeanwizard.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In the wizard you can select an existing bean class from your project or create a new bean class. You can also specify constructor arguments and bean properties.
      Once created you can then modify the properties of that Bean inside the &lt;code&gt;Properties&lt;/code&gt; view.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;alt&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/beanproperties.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;freemarker&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#freemarker&quot;&gt;&lt;/a&gt;Freemarker&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;freemarker-component-deprecation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#freemarker-component-deprecation&quot;&gt;&lt;/a&gt;Freemarker component deprecation&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Freemarker component has been marked deprecated as there is no more maintenance on the source code. It is still available in Red Hat Central
      and may be removed in the future.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Jeff Maury&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 19 Jul 2017 11:01:31 +0000</pubDate>
</item>
<item>
	<title>Philip Wenig: Eclipse Hackathon Hamburg ‚Äì July 2017</title>
	<guid isPermaLink="false">http://openchrom.wordpress.com/?p=481</guid>
	<link>https://openchrom.wordpress.com/2017/07/18/eclipse-hackathon-hamburg-july-2017/</link>
	<description>&lt;p&gt;We tried an experiment yesterday, it was quite successful. Instead of having just a meeting in the evening, we started at 11 am ‚Ä¶ eventually, it also lasts till the night :-).&lt;br /&gt;
&lt;a href=&quot;https://wiki.eclipse.org/Hackathon_Hamburg_2017_July&quot; target=&quot;_blank&quot;&gt;https://wiki.eclipse.org/Hackathon_Hamburg_2017_July&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Over the day, we‚Äôve been approx. 20 people. Definitively, we will do it again! Also a big thank to the &lt;strong&gt;University of Hamburg&lt;/strong&gt; and &lt;strong&gt;Prof. Dr. Walid Maalej&lt;/strong&gt; who hosted us:&lt;br /&gt;
&lt;a href=&quot;https://mast.informatik.uni-hamburg.de&quot; target=&quot;_blank&quot;&gt;https://mast.informatik.uni-hamburg.de &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;And a big thanks to the Eclipse Foundations for Pizza and Beverages!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://openchrom.files.wordpress.com/2017/07/hackathon-07-1.jpg&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-large wp-image-482&quot; height=&quot;190&quot; src=&quot;https://openchrom.files.wordpress.com/2017/07/hackathon-07-1.jpg?w=640&amp;amp;h=190&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://openchrom.files.wordpress.com/2017/07/hackathon-07-2.jpg&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-large wp-image-483&quot; height=&quot;182&quot; src=&quot;https://openchrom.files.wordpress.com/2017/07/hackathon-07-2.jpg?w=640&amp;amp;h=182&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In summary, 25 bugs have been fixed:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://openchrom.files.wordpress.com/2017/07/hackathon-07-3.jpg&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-large wp-image-484&quot; height=&quot;769&quot; src=&quot;https://openchrom.files.wordpress.com/2017/07/hackathon-07-3.jpg?w=640&amp;amp;h=769&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=483165&quot; target=&quot;_blank&quot;&gt;#483165&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=488231&quot; target=&quot;_blank&quot;&gt;#488231&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=519709&quot; target=&quot;_blank&quot;&gt;#519709&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=488215&quot; target=&quot;_blank&quot;&gt;#488215&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=493299&quot; target=&quot;_blank&quot;&gt;#493299&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=519356&quot; target=&quot;_blank&quot;&gt;#519356&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=519519&quot; target=&quot;_blank&quot;&gt;#519519&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=519255&quot; target=&quot;_blank&quot;&gt;#519255&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=519652&quot; target=&quot;_blank&quot;&gt;#519652&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=519768&quot; target=&quot;_blank&quot;&gt;#519768&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=519525&quot; target=&quot;_blank&quot;&gt;#519525&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=519767&quot; target=&quot;_blank&quot;&gt;#519767&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=501720&quot; target=&quot;_blank&quot;&gt;#501720&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=507881&quot; target=&quot;_blank&quot;&gt;#507881&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=519779&quot; target=&quot;_blank&quot;&gt;#519779&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=519778&quot; target=&quot;_blank&quot;&gt;#519778&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=326870&quot; target=&quot;_blank&quot;&gt;#326870&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=519714&quot; target=&quot;_blank&quot;&gt;#519714&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=519765&quot; target=&quot;_blank&quot;&gt;#519765&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=518996&quot; target=&quot;_blank&quot;&gt;#518996&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=519783&quot; target=&quot;_blank&quot;&gt;#519783&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=508535&quot; target=&quot;_blank&quot;&gt;#508535&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=239626&quot; target=&quot;_blank&quot;&gt;#239626&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=519776&quot; target=&quot;_blank&quot;&gt;#519776&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=519786&quot; target=&quot;_blank&quot;&gt;#519786&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I worked on many improvements of the SWTChart extensions as part of the &lt;a href=&quot;https://projects.eclipse.org/projects/science.eavp&quot; target=&quot;_blank&quot;&gt;Eclipse Advanced Visualization Project&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://openchrom.files.wordpress.com/2017/07/hackathon-07-4.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-large wp-image-485&quot; height=&quot;360&quot; src=&quot;https://openchrom.files.wordpress.com/2017/07/hackathon-07-4.png?w=640&amp;amp;h=360&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://openchrom.files.wordpress.com/2017/07/hackathon-07-5.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-large wp-image-486&quot; height=&quot;360&quot; src=&quot;https://openchrom.files.wordpress.com/2017/07/hackathon-07-5.png?w=640&amp;amp;h=360&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://openchrom.files.wordpress.com/2017/07/hackathon-07-6.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-large wp-image-487&quot; height=&quot;360&quot; src=&quot;https://openchrom.files.wordpress.com/2017/07/hackathon-07-6.png?w=640&amp;amp;h=360&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/eclipse/eavp/tree/chemclipse/org.eclipse.eavp.service.swtchart&quot; target=&quot;_blank&quot;&gt;https://github.com/eclipse/eavp/tree/chemclipse/org.eclipse.eavp.service.swtchart&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Demos:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/eclipse/eavp/tree/chemclipse/org.eclipse.eavp.service.swtchart.demos&quot; target=&quot;_blank&quot;&gt;https://github.com/eclipse/eavp/tree/chemclipse/org.eclipse.eavp.service.swtchart.demos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;See you at the next Eclipse Hackathon!&lt;/strong&gt;&lt;/p&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=openchrom.wordpress.com&amp;amp;blog=25006439&amp;amp;post=481&amp;amp;subd=openchrom&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 18 Jul 2017 08:24:25 +0000</pubDate>
</item>
<item>
	<title>Cedric Brun: You only have a few more hours to submit to EclipseCon Europe!</title>
	<guid isPermaLink="false">http://cedric.brun.io/eclipse/eclipsecon-europe-2017</guid>
	<link>http://cedric.brun.io/eclipse/eclipsecon-europe-2017/</link>
	<description>&lt;p&gt;I‚Äôm deeply honored of being part of the &lt;a href=&quot;https://www.eclipsecon.org/europe2017/about-pc&quot;&gt;program committee&lt;/a&gt; again for EclipseCon Europe 2017.&lt;/p&gt;

&lt;p&gt;Each year I‚Äôm amazed at this conference, it was one of the first Eclipse event I attend and since then it has always had a strong friendly vibe to it.&lt;/p&gt;

&lt;p&gt;In the last few years it evolved into the main international event for the Eclipse community, attending it should be a no brainer.&lt;/p&gt;

&lt;p&gt;This conference is great because of the content and the people, help us select good content by submitting it!
By my count we already have more than 170 submissions and the usual &lt;strong&gt;last minute flood&lt;/strong&gt; might start any minute from now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In the next few hours the call for papers will be closed&lt;/strong&gt;: now is a good time to hit that submit button. Small is beautiful: submit abstracts which are ‚Äúto the point‚Äù are giving clear insight into what content and structure you are proposing. No need for 400 words of context, stick to what makes your submission relevant to EclipseCon and interesting to share.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.eclipsecon.org/europe2017/cfp&quot;&gt;submit your talk now !&lt;/a&gt; and see you there!&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;http://cedric.brun.io/images/blog/ece-2016-full.jpg&quot;&gt;&lt;img src=&quot;http://cedric.brun.io/images/blog/ece-2016.jpg&quot; /&gt;&lt;/a&gt;    
    Memories from EclipseCon 2016
&lt;/figure&gt;


    &lt;p&gt;&lt;a href=&quot;http://cedric.brun.io/eclipse/eclipsecon-europe-2017/&quot;&gt;You only have a few more hours to submit to EclipseCon Europe!&lt;/a&gt; was originally published by C√©dric Brun at &lt;a href=&quot;http://cedric.brun.io&quot;&gt;CTO @ Obeo&lt;/a&gt; on July 17, 2017.&lt;/p&gt;</description>
	<pubDate>Mon, 17 Jul 2017 00:00:00 +0000</pubDate>
	<author>cedric.brun@obeo.fr (C√©dric Brun)</author>
</item>
<item>
	<title>Holger Voormann: Eclipse Oxygen Webinars: 6 talks with a total of almost 5 hours</title>
	<guid isPermaLink="false">http://eclipsehowl.wordpress.com/?p=1263</guid>
	<link>https://eclipsehowl.wordpress.com/2017/07/17/eclipse-oxygen-webinars-6-talks-with-a-total-of-almost-5-hours/</link>
	<description>&lt;p&gt;Like &lt;a href=&quot;https://www.youtube.com/playlist?list=PLy7t4z5SYNaTzWo4OTOxRisfKNby7dENY&quot;&gt;last year&lt;/a&gt;, also &lt;a href=&quot;https://www.youtube.com/playlist?list=PLy7t4z5SYNaTM66CahSlkMh5YkndYXMUq&quot;&gt;this year&lt;/a&gt; the Eclipse simultaneous release was accompanied by a series of talks in which developers present their new developments (thanks &lt;a href=&quot;https://twitter.com/katvcb&quot;&gt;Kat Hirsch&lt;/a&gt; for hosting it). Here is my summary of these six so-called &lt;a href=&quot;https://www.youtube.com/playlist?list=PLy7t4z5SYNaTM66CahSlkMh5YkndYXMUq&quot;&gt;webinars about Eclipse Oxygen&lt;/a&gt;; the first three are for IDE users, the other three about Eclipse frameworks:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/lakshmip&quot;&gt;Lakshmi P Shanmugam&lt;/a&gt;:&lt;br /&gt;
&lt;em&gt;&lt;strong&gt;&lt;a href=&quot;https://youtu.be/-ozOwMmn84k?list=PLy7t4z5SYNaTM66CahSlkMh5YkndYXMUq&quot;&gt;What‚Äôs New in the Eclipse Platform? (57:07)&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;If you have already seen &lt;a href=&quot;https://youtu.be/Y0-cO9wZj6w&quot;&gt;my 10-minute Oxygen video&lt;/a&gt;, you can &lt;a href=&quot;https://youtu.be/-ozOwMmn84k?t=33m18s&quot;&gt;skip the first half&lt;/a&gt;¬†on Eclipse Platform and Java development tools (JDT) improvements. If you watch the talk from the beginning, you can skip the part from &lt;a href=&quot;https://youtu.be/-ozOwMmn84k?t=23m11s&quot;&gt;23:11&lt;/a&gt; and &lt;a href=&quot;https://youtu.be/-ozOwMmn84k?t=33m18s&quot;&gt;33:18&lt;/a&gt;, where the screen sharing is interrupted and afterwards some improvements are shown again. In the second half, &lt;a href=&quot;https://youtu.be/-ozOwMmn84k?t=43m19s&quot;&gt;Trace Points&lt;/a&gt;, which are missing in my video, are explained. Also &lt;a href=&quot;https://youtu.be/-ozOwMmn84k?t=44m41s&quot;&gt;Plug-in Development Environment (PDE)&lt;/a&gt;¬†and the &lt;a href=&quot;https://youtu.be/-ozOwMmn84k?t=49m16s&quot;&gt;API Tooling&lt;/a&gt;¬†improvements are demonstrated. I recommend Java developers to watch at least this and the following video. In addition, you might also watch the three-month old video of the Devoxx talk &lt;a href=&quot;https://youtu.be/94hhzGnzqbw&quot;&gt;&lt;em&gt;Eclipse 4.7 Platform News by Lars Vogel&lt;/em&gt; (23:38)&lt;/a&gt;, which gives a deeper insight into some of the Platform, JDT and PDE improvements.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/marcandsweep&quot;&gt;Marc R. Hoffmann&lt;/a&gt;:&lt;br /&gt;
&lt;em&gt;&lt;strong&gt;&lt;a href=&quot;https://youtu.be/p_mVa9iNmzk?list=PLy7t4z5SYNaTM66CahSlkMh5YkndYXMUq&quot;&gt;EclEmma ‚Äì Code Coverage in Practice (48:57)&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;AsEclEmma became an Eclipse project, the Java IDE packages are shipped with built-in Java code coverage analysis now. This webinar gives a general introduction to EclEmma, but also shows how to use the Java Code Coverage feature to &lt;a href=&quot;https://youtu.be/p_mVa9iNmzk?t=14m53s&quot;&gt;find unused code or JAR dependencies&lt;/a&gt;.&lt;br /&gt;
A nice trick is to &lt;a href=&quot;https://youtu.be/p_mVa9iNmzk?t=17m41s&quot;&gt;find the code of a particular function of an application by differential code coverage&lt;/a&gt;: launch the application in coverage mode, reset already collected coverage data, execute the function and dump the coverage data. The code executed by the function is shown as covered. At the end of the webinar, some tips are given &lt;a href=&quot;https://youtu.be/p_mVa9iNmzk?t=42m45s&quot;&gt;how common pitfalls can be avoided&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/kaloyanraev&quot;&gt;Kaloyan Raev&lt;/a&gt;:&lt;br /&gt;
&lt;em&gt;&lt;a href=&quot;https://youtu.be/t9TXjCw8110?list=PLy7t4z5SYNaTM66CahSlkMh5YkndYXMUq&quot;&gt;&lt;strong&gt;PHP Development Tools (PDT) 5.0 (46:26)&lt;/strong&gt;&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;This webinar is much more detailed and comprehensive than the Eclipse Newsletter article &lt;a href=&quot;https://eclipse.org/community/eclipse_newsletter/2017/june/article2.php&quot;&gt;&lt;em&gt;What‚Äôs new in Eclipse PHP Development Tools (PDT) 5.0&lt;/em&gt;&lt;/a&gt;. In contrast to the previous videos, the improvements are not shown in action, but inmany screenshots. PDT 5.0 &lt;a href=&quot;https://youtu.be/t9TXjCw8110?t=6m24s&quot;&gt;supports PHP 7.1&lt;/a&gt;¬†and &lt;a href=&quot;https://youtu.be/t9TXjCw8110?t=8m8s&quot;&gt;integrates the Composer&lt;/a&gt;¬†(a PHP dependency manager: similar what npm is for node.js or Maven is for Java) as well as &lt;a href=&quot;https://youtu.be/t9TXjCw8110?t=16m23s&quot;&gt;PHPUnit&lt;/a&gt;. New in PDT are also functions to &lt;a href=&quot;https://youtu.be/t9TXjCw8110?t=28m55s&quot;&gt;organize use statements&lt;/a&gt;¬†(similar to Organize Imports in JDT). It is nice to know that the activity and &lt;a href=&quot;https://youtu.be/t9TXjCw8110?t=35m22s&quot;&gt;diversity&lt;/a&gt; with regard to the involved developers and companies is growing. &lt;a href=&quot;https://youtu.be/t9TXjCw8110?t=39m30s&quot;&gt;Maybe in a future version&lt;/a&gt;¬†code completion proposals will come from a PHP language server instead of as before from PDT. An &lt;a href=&quot;https://github.com/felixfbecker/php-language-server&quot;&gt;experimental integration of a PHP language server&lt;/a&gt; implemented in PHP already exists. If you want to know more about general Eclipse integration of language servers, see the next webinar.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/smcela&quot;&gt;Sopot Cela&lt;/a&gt;¬†and &lt;a href=&quot;https://twitter.com/mickaelistria&quot;&gt;Mickael Istria&lt;/a&gt;:&lt;br /&gt;
&lt;em&gt;&lt;a href=&quot;https://youtu.be/866-xH2Oi4c?list=PLy7t4z5SYNaTM66CahSlkMh5YkndYXMUq&quot;&gt;&lt;strong&gt;Generic Editor and Language Server Protocol (LSP) (53:55)&lt;/strong&gt;&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;At the beginning the new &lt;a href=&quot;https://youtu.be/866-xH2Oi4c?t=48s&quot;&gt;Generic Editor&lt;/a&gt;¬†is shown. The Generic Editor is extended by the new LSP4E Eclipse project to support the Language Server Protocol (LSP). The term server is somewhat misleading as the most likely use case will be that the server will be installed and run locally or where the files are (see Mickael‚Äôs comment below).¬†The &lt;a href=&quot;https://youtu.be/866-xH2Oi4c?t=19m5s&quot;&gt;explanation of LSP&lt;/a&gt;¬†is followed by the demonstration of two experimental language server integrations, &lt;em&gt;&lt;a href=&quot;https://github.com/mickaelistria/aCute&quot;&gt;aCute&lt;/a&gt; &lt;/em&gt;for &lt;a href=&quot;https://youtu.be/866-xH2Oi4c?t=35m44s&quot;&gt;C#&lt;/a&gt;¬†and &lt;em&gt;&lt;a href=&quot;https://github.com/mickaelistria/eclipse-bluesky&quot;&gt;BlueSky&lt;/a&gt; &lt;/em&gt;for &lt;a href=&quot;https://youtu.be/866-xH2Oi4c?t=38m37s&quot;&gt;HTML, CSS, JavaScript and TypeScript&lt;/a&gt;¬†files. Although LSP is only about a year old, &lt;a href=&quot;https://youtu.be/866-xH2Oi4c?t=40m48s&quot;&gt;LSP support has already been announced for 27 languages&lt;/a&gt;. Up to now &lt;a href=&quot;https://youtu.be/866-xH2Oi4c?t=41m22s&quot;&gt;LSP is limited&lt;/a&gt; to editing files: no debugging support, no refactorings apart from renaming and no possibility to show a type hierarchy and syntax highlighting is done via TextMate grammars. Like EGit and JGit for Git, the LSP support is realized via the two new Eclipse projects LSP4E and LSP4J, so that not-Eclipse-based applications can use the LSP4J framework. In the next webinar one of such applications is shown.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/svenefftinge&quot;&gt;Sven Efftinge&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/sponemann&quot;&gt;Miro Sp√∂nemann&lt;/a&gt;:&lt;br /&gt;
&lt;em&gt;&lt;strong&gt;&lt;a href=&quot;https://youtu.be/5Wr4NeOZ5H4?list=PLy7t4z5SYNaTM66CahSlkMh5YkndYXMUq&quot;&gt;New in Xtext: Core Framework, LSP, Tracing Code Generators (51:00)&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The webinar starts with the &lt;a href=&quot;https://youtu.be/5Wr4NeOZ5H4?t=1m56s&quot;&gt;history of Xtext&lt;/a&gt;, a framework and tools to build and support domain-specific languages. Since Eclipse IDE lost market share, Xtext support has been &lt;a href=&quot;https://youtu.be/5Wr4NeOZ5H4?t=4m50s&quot;&gt;extended to IntelliJ IDEA&lt;/a&gt;¬†and will be extended to code editors and other IDEs via &lt;a href=&quot;https://youtu.be/5Wr4NeOZ5H4?t=14m47s&quot;&gt;LSP&lt;/a&gt;. The Xtext language server is shown in action &lt;a href=&quot;https://youtu.be/5Wr4NeOZ5H4?t=21m13s&quot;&gt;in the Eclipse IDE&lt;/a&gt;¬†as well &lt;a href=&quot;https://youtu.be/5Wr4NeOZ5H4?t=23m50s&quot;&gt;in Theia&lt;/a&gt;, a cloud and desktop IDE framework implemented in TypeScript. After the demos the new Xtext feature to &lt;a href=&quot;https://youtu.be/5Wr4NeOZ5H4?t=28m&quot;&gt;generate trace code&lt;/a&gt; is explained.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/melaniebats&quot;&gt;M√©lanie Bats&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/sbegaudeau&quot;&gt;St√©phane B√©gaudeau&lt;/a&gt;:&lt;br /&gt;
&lt;em&gt;&lt;strong&gt;&lt;a href=&quot;https://youtu.be/EkLkhuA40zw?list=PLy7t4z5SYNaTM66CahSlkMh5YkndYXMUq&quot;&gt;Eclipse Sirius 5.0, All about UX (32:40)&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The last webinar is about Sirius. Sirius is for graphical editors what Xtext is for text editors. The new features are especially ‚Äì as the title suggests ‚Äì user experience improvements. They are explained by slides and shown in action. For instance, the &lt;a href=&quot;https://youtu.be/EkLkhuA40zw?t=5m30s&quot;&gt;decorator mechanism&lt;/a&gt;¬†has been improved, e. g. the decorator icons on boxes and on images are placed in such a way that they do not accidentally overlap anymore. There is also an &lt;a href=&quot;https://eclipse.org/community/eclipse_newsletter/2017/june/article4.php&quot;&gt;Eclipse Newsletter article about these Sirius user experience improvements&lt;/a&gt;, but it is certainly more interesting to see Sirius in action in the webinar.&lt;/p&gt;
&lt;p&gt;These were the six Eclipse Oxygen webinars with a total duration of almost five hours, presented by ten people from all over the world. In case this is not enough, check out my &lt;em&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLnh_8hTD4yvm-suipQ5jwI6GtAR64q3VE&quot;&gt;Recommended Eclipse Videos&lt;/a&gt;&lt;/em&gt; playlist. If you have any recommendation for an Eclipse video, please drop a comment.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/eclipsehowl.wordpress.com/1263/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/eclipsehowl.wordpress.com/1263/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=eclipsehowl.wordpress.com&amp;amp;blog=11064764&amp;amp;post=1263&amp;amp;subd=eclipsehowl&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 16 Jul 2017 23:03:02 +0000</pubDate>
</item>
<item>
	<title>Christian Pontesegger: EclipseCon Europe - Wouldn't it be cool to be on stage there?</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-3460102793186140898.post-9115525800327923631</guid>
	<link>http://codeandme.blogspot.com/2017/07/eclipsecon-europe-wouldnt-it-be-cool-to.html</link>
	<description>I remember my first EclipseCon and how impressed I was by the quality of talks and the technical skills those speakers showed. Proposing a talk of my own was totally out of question.&lt;br /&gt;A year later I thought: &quot;proposing a talk does not harm, it will anyhow get rejected.&quot; So I spent 20 minutes on writing the proposal (took me 18 minutes to come up with a fancy title). Some months later I did my first talk at EclipseCon.&lt;br /&gt;&lt;br /&gt;EclipseCon does have a lot of technical talks that require deep knowledge of certain aspects of eclipse. However often the most interesting talks are not even technical. I remember a talk from last year: &lt;a href=&quot;https://www.eclipsecon.org/europe2016/session/hearing-and-feeling-eclipse&quot; target=&quot;_blank&quot;&gt;Hearing and Feeling Eclipse&lt;/a&gt; - a story about how blind people experience and use our beloved IDE. It is also interesting how companies use Eclipse technology, how to overcome typical obstacles or ideas and proposals on how to improve Eclipse.&lt;br /&gt;&lt;br /&gt;Such talks will attract developers and committers and introduce fresh ideas. Besides the audience is great, the spirit is awesome and it is perfect way to get in touch with people that work on similar topics.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://resheim.net/2017/07/eclipsecon-europe-2017-get-your-talk-proposals-in-now.html&quot; target=&quot;_blank&quot;&gt;Torkild wrote about the free tshirts&lt;/a&gt; you get, but he forgot about the beer and the band (which hopefully will also play this year).&lt;br /&gt;&lt;br /&gt;So &lt;a href=&quot;https://www.eclipsecon.org/europe2017/cfp&quot; target=&quot;_blank&quot;&gt;submit your talk right now&lt;/a&gt;. Its not a contract yet you have to fulfill, its a proposal :)&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</description>
	<pubDate>Fri, 14 Jul 2017 10:26:31 +0000</pubDate>
	<author>noreply@blogger.com (Christian Pontesegger)</author>
</item>
<item>
	<title>Scott Lewis: ECF 3.13.7 Oxygen: Maven and Python OSGi Services</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-20358640.post-2567075781646155036</guid>
	<link>http://eclipseecf.blogspot.com/2017/07/ecf-3137-oxygen-maven-and-python-osgi.html</link>
	<description>&lt;a href=&quot;https://www.eclipse.org/ecf/downloads.php&quot; target=&quot;_blank&quot;&gt;ECF 3.13.7&lt;/a&gt; has been released as part of the &lt;a href=&quot;https://projects.eclipse.org/releases/oxygen&quot; target=&quot;_blank&quot;&gt;Oxygen Simultaneous Release&lt;/a&gt;. ¬†ECF's work recently has emphasized it's implementation of &lt;a href=&quot;https://wiki.eclipse.org/Eclipse_Communication_Framework_Project#OSGi_Remote_Services&quot; target=&quot;_blank&quot;&gt;OSGi Remote Services&lt;/a&gt;, and the 3.13.7 continues this emphasis.&lt;br /&gt;&lt;br /&gt;Highlights:&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;ECF has &lt;a href=&quot;https://wiki.eclipse.org/Distribution_Providers&quot; target=&quot;_blank&quot;&gt;multiple distribution providers&lt;/a&gt;,¬†and most have been moved to Maven-based builds&lt;/li&gt;&lt;li&gt;Remote Services/RSA is now available via &lt;a href=&quot;https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.eclipse.ecf%22&quot; target=&quot;_blank&quot;&gt;Maven Central&lt;/a&gt;, and the &lt;a href=&quot;https://wiki.eclipse.org/EIG:Install_into_Apache_Karaf&quot; target=&quot;_blank&quot;&gt;Karaf Feature Install&lt;/a&gt;¬†uses Maven install.&lt;/li&gt;&lt;li&gt;A new distribution provider that allows Python code as OSGi Services. ¬† See &lt;a href=&quot;https://wiki.eclipse.org/Tutorial:_Python_for_OSGi_Services&quot; target=&quot;_blank&quot;&gt;this tutorial&lt;/a&gt; for a description.&lt;/li&gt;&lt;li&gt;Many bug fixes and small improvements&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</description>
	<pubDate>Thu, 13 Jul 2017 01:54:33 +0000</pubDate>
	<author>noreply@blogger.com (Scott Lewis)</author>
</item>
<item>
	<title>Orion: What‚Äôs new in Orion 15.0</title>
	<guid isPermaLink="false">http://planetorion.org/news/?p=894</guid>
	<link>http://planetorion.org/news/2017/07/whats-new-in-orion-15-0/</link>
	<description>&lt;p&gt;After three more months of hard work from committers and our amazing community, we have &lt;a href=&quot;http://planetorion.org/news/2017/06/announcing-orion-15/&quot;&gt;another great release&lt;/a&gt;! This release continued our mission to make Orion as accessible as possible for all developers, included many UX improvements and has a lot of new language tooling features.&lt;/p&gt;
&lt;h2&gt;Accessibility&lt;/h2&gt;
&lt;p&gt;We‚Äôre continually improving Orion to be the best possible experience for all developers. In Orion 15, we have improved keyboard access, menu navigation and better handling of ‚Äúsplitters‚Äù.&lt;/p&gt;
&lt;h3&gt;Improved tab handling&lt;/h3&gt;
&lt;p&gt;A substantial amount of work went into making sure that use of the tab key was sensible and properly presented an affordance for its location. Some of the work included:&lt;/p&gt;
&lt;p&gt;1.¬†Ensure that all locations that can be tabbed to show a visible ‚Äòfocus rect‚Äô&lt;/p&gt;
&lt;div class=&quot;wp-caption aligncenter&quot; id=&quot;attachment_904&quot; style=&quot;width: 310px;&quot;&gt;&lt;a href=&quot;http://planetorion.org/news/wp-content/uploads/2017/07/tab-focus-rect.png&quot;&gt;&lt;img alt=&quot;Tab focus rectangle&quot; class=&quot;size-medium wp-image-904&quot; height=&quot;193&quot; src=&quot;http://planetorion.org/news/wp-content/uploads/2017/07/tab-focus-rect-300x193.png&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Tab focus rectangle&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;2. Extend the F2 capability for the editor to show an annotation hover to also show (and put the focus on) any available tooltip for the element with the focus, regardless of the page you‚Äôre on (i.e. works on the Git and Settings pages as well now. ESC will return focus to the original element.&lt;/p&gt;
&lt;div class=&quot;wp-caption aligncenter&quot; id=&quot;attachment_905&quot; style=&quot;width: 310px;&quot;&gt;&lt;a href=&quot;http://planetorion.org/news/wp-content/uploads/2017/07/f2-focus-rect.png&quot;&gt;&lt;img alt=&quot;F2 focus tab rectangle&quot; class=&quot;size-medium wp-image-905&quot; height=&quot;139&quot; src=&quot;http://planetorion.org/news/wp-content/uploads/2017/07/f2-focus-rect-300x139.png&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;F2 focus tab rectangle&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;3. Make sure that all modal dialogs will ‚Äòtrap‚Äô the tab key usage and correctly cycle through the dialogs‚Äô elements.&lt;/p&gt;
&lt;h3&gt;Improved menu navigation&lt;/h3&gt;
&lt;p&gt;On the Edit page if the focus is on the main menu you can now use the arrow keys to navigate to any item in the whole menu structure.&lt;/p&gt;
&lt;h3&gt;Improved splitter manipulation&lt;/h3&gt;
&lt;p&gt;There is a new command Command + Shift + ‚Äò.‚Äô available that will cycle through each splitter on the page, granting it focus. Once focussed you can use the arrow keys to move the splitter, Enter to toggle the splitter‚Äôs ‚Äòthumb‚Äô (if any). ESC will return the focus to the original element.&lt;/p&gt;
&lt;h2&gt;Code Edit Widget&lt;/h2&gt;
&lt;h3&gt;Override default keybindings&lt;/h3&gt;
&lt;p&gt;Consumers of the widget now have complete control over the keybindings in use ‚Äì with improved support to completely override the default bindings the come with Orion.&lt;/p&gt;
&lt;p&gt;More details can be found on the &lt;a href=&quot;https://wiki.eclipse.org/Orion/How_Tos/Code_Edit#How_to_know_the_reserved_keybindings&quot;&gt;in-depth how-to wiki page&lt;/a&gt; for the widget.&lt;/p&gt;
&lt;h2&gt;Language Tools&lt;/h2&gt;
&lt;h3&gt;Docker file support&lt;/h3&gt;
&lt;p&gt;When working within docker files, Orion 15 now has support for content assist to make things easier. Assist uses the standard¬†&lt;strong&gt;Ctrl+space&lt;/strong&gt; keybinding.&lt;/p&gt;
&lt;div class=&quot;wp-caption aligncenter&quot; id=&quot;attachment_898&quot; style=&quot;width: 728px;&quot;&gt;&lt;a href=&quot;http://planetorion.org/news/wp-content/uploads/2017/07/dockerfile-assist.png&quot;&gt;&lt;img alt=&quot;Dockerfile assist&quot; class=&quot; wp-image-898&quot; height=&quot;225&quot; src=&quot;http://planetorion.org/news/wp-content/uploads/2017/07/dockerfile-assist-300x94.png&quot; width=&quot;718&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Dockerfile assist&lt;/p&gt;&lt;/div&gt;
&lt;h3&gt;Improved content assist&lt;/h3&gt;
&lt;p&gt;There have been many improvements in the content assist for other languages as well. For example, assist within CSS files got a substantial overhaul and now provides more complete and correct assist for rules and attributes.&lt;/p&gt;
&lt;div class=&quot;wp-caption aligncenter&quot; id=&quot;attachment_899&quot; style=&quot;width: 496px;&quot;&gt;&lt;a href=&quot;http://planetorion.org/news/wp-content/uploads/2017/07/css-assist.png&quot;&gt;&lt;img alt=&quot;CSS assist&quot; class=&quot; wp-image-899&quot; height=&quot;204&quot; src=&quot;http://planetorion.org/news/wp-content/uploads/2017/07/css-assist-300x126.png&quot; width=&quot;486&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;CSS assist&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;We have also made assist for HTML and JavaScript a bit easier to understand at first glance, by decorating obsolete and deprecated proposals differently than ‚Äúnormal‚Äù ones.&lt;/p&gt;
&lt;div class=&quot;wp-caption aligncenter&quot; id=&quot;attachment_900&quot; style=&quot;width: 504px;&quot;&gt;&lt;a href=&quot;http://planetorion.org/news/wp-content/uploads/2017/07/deprecated-js-use.png&quot;&gt;&lt;img alt=&quot;Deprecated JavaScript proposal&quot; class=&quot; wp-image-900&quot; height=&quot;229&quot; src=&quot;http://planetorion.org/news/wp-content/uploads/2017/07/deprecated-js-use-300x139.png&quot; width=&quot;494&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Deprecated JavaScript proposal&lt;/p&gt;&lt;/div&gt;
&lt;h3&gt;.tern-project hover support&lt;/h3&gt;
&lt;p&gt;While working in your .tern-project file, you can now hover over entries in the file to get additional information and help.&lt;/p&gt;
&lt;div class=&quot;wp-caption aligncenter&quot; id=&quot;attachment_901&quot; style=&quot;width: 477px;&quot;&gt;&lt;a href=&quot;http://planetorion.org/news/wp-content/uploads/2017/07/tern-project-hover.png&quot;&gt;&lt;img alt=&quot;Tern project file hover&quot; class=&quot; wp-image-901&quot; height=&quot;162&quot; src=&quot;http://planetorion.org/news/wp-content/uploads/2017/07/tern-project-hover-300x104.png&quot; width=&quot;467&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Tern project file hover&lt;/p&gt;&lt;/div&gt;
&lt;h3&gt;package.json hover support&lt;/h3&gt;
&lt;p&gt;While working in your package.json file, you can now hover over entries in the file to get additional information and help.&lt;/p&gt;
&lt;div class=&quot;wp-caption aligncenter&quot; id=&quot;attachment_902&quot; style=&quot;width: 494px;&quot;&gt;&lt;a href=&quot;http://planetorion.org/news/wp-content/uploads/2017/07/package-json-hover.png&quot;&gt;&lt;img alt=&quot;package.json hover&quot; class=&quot; wp-image-902&quot; height=&quot;216&quot; src=&quot;http://planetorion.org/news/wp-content/uploads/2017/07/package-json-hover-300x134.png&quot; width=&quot;484&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;package.json hover&lt;/p&gt;&lt;/div&gt;
&lt;h3&gt;.eslintrc hover support&lt;/h3&gt;
&lt;p&gt;While working in your eslint configuration file(s), you can now hover over entries in the file to get additional information and help.&lt;/p&gt;
&lt;div class=&quot;wp-caption aligncenter&quot; id=&quot;attachment_903&quot; style=&quot;width: 521px;&quot;&gt;&lt;a href=&quot;http://planetorion.org/news/wp-content/uploads/2017/07/eslint-hover.png&quot;&gt;&lt;img alt=&quot;ESLint hover&quot; class=&quot; wp-image-903&quot; height=&quot;114&quot; src=&quot;http://planetorion.org/news/wp-content/uploads/2017/07/eslint-hover-300x67.png&quot; width=&quot;511&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;ESLint hover&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;The hover support for ESLint configuration entries is also available within your package.json file in the¬†&lt;em&gt;eslintConfig&lt;/em&gt; section. The hover support is not available yet in the *.yml and *.yaml variants of the ESLint configuration files.&lt;/p&gt;
&lt;h3&gt;Third party Tern plug-ins&lt;/h3&gt;
&lt;p&gt;Adding a Tern plug-in to Orion that is not part of the codebase has always been challenging. First you would have to modify the JavaScript tools code, rebuild Orion yourself and then deploy it yourself. In Orion 15 though, you can now load a plug-in directly from your workspace or another location.&lt;/p&gt;
&lt;p&gt;The complete details can be found &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=496655#c8&quot;&gt;on the bug&lt;/a&gt;, but the general scheme is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;you can load a Tern plug-in from a hosted location or the¬†&lt;em&gt;.tern-plugins&lt;/em&gt; folder within your project&lt;/li&gt;
&lt;li&gt;you plug-in can contribute to all the normal passes and callbacks from Tern&lt;/li&gt;
&lt;li&gt;your plug-in must be declared via the¬†&lt;em&gt;.tern-project&lt;/em&gt; file&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Platform Improvements&lt;/h2&gt;
&lt;h3&gt;JavaScript project information&lt;/h3&gt;
&lt;p&gt;If you select a project in the navigator, Orion now has support to show you what the JavaScript tools thinks about the configuration of the project. The new information is shown in the¬†&lt;strong&gt;JavaScript&lt;/strong&gt; section and contains helpful information about what ECMA level is being used to parse, etc. There are also handy links to common configuration files (if they are present in the project).&lt;/p&gt;
&lt;div class=&quot;wp-caption aligncenter&quot; id=&quot;attachment_895&quot; style=&quot;width: 469px;&quot;&gt;&lt;a href=&quot;http://planetorion.org/news/wp-content/uploads/2017/07/js-project-info.png&quot;&gt;&lt;img alt=&quot;JavaScript project information&quot; class=&quot; wp-image-895&quot; height=&quot;228&quot; src=&quot;http://planetorion.org/news/wp-content/uploads/2017/07/js-project-info-300x149.png&quot; width=&quot;459&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;JavaScript project information&lt;/p&gt;&lt;/div&gt;
&lt;h3&gt;Updated ‚ÄúHide system files from the navigator ‚Äù preferences&lt;/h3&gt;
&lt;p&gt;Rather than having to type out all of the names of resources you want to be filtered from the explorer views, we have updated the preference to support wildcards like¬†&lt;strong&gt;?&lt;/strong&gt; and¬†&lt;strong&gt;*&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Editor tab support&lt;/h3&gt;
&lt;p&gt;Finally. After all this time, we have support in Orion for multiple editor tabs! By default Orion still works in the ‚Äúone editor per browser tab‚Äù mode, but you can start using editor tabs by simply turning on the preference in the¬†&lt;strong&gt;General&lt;/strong&gt;¬†prefs section.&lt;/p&gt;
&lt;div class=&quot;wp-caption aligncenter&quot; id=&quot;attachment_896&quot; style=&quot;width: 480px;&quot;&gt;&lt;a href=&quot;http://planetorion.org/news/wp-content/uploads/2017/07/editor-tabs-prefs.png&quot;&gt;&lt;img alt=&quot;Orion editor tabs preference&quot; class=&quot; wp-image-896&quot; height=&quot;72&quot; src=&quot;http://planetorion.org/news/wp-content/uploads/2017/07/editor-tabs-prefs-300x46.png&quot; width=&quot;470&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Orion editor tabs preference&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;Once enabled, you can open multiple files within a single editor, rather than have multiple browser tabs open.¬†Tabs can be closed, dragged, reordered, and switched to using convenient keybindings.&lt;/p&gt;
&lt;div class=&quot;wp-caption aligncenter&quot; id=&quot;attachment_897&quot; style=&quot;width: 475px;&quot;&gt;&lt;a href=&quot;http://planetorion.org/news/wp-content/uploads/2017/07/multi-editor-tabs.png&quot;&gt;&lt;img alt=&quot;Multiple editor tabs&quot; class=&quot; wp-image-897&quot; height=&quot;158&quot; src=&quot;http://planetorion.org/news/wp-content/uploads/2017/07/multi-editor-tabs-300x102.png&quot; width=&quot;465&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Multiple editor tabs&lt;/p&gt;&lt;/div&gt;
&lt;h3&gt;Custom Themes&lt;/h3&gt;
&lt;p&gt;Plugins can now contribute their own themes to style Orion. All of the information related to the new¬†&lt;strong&gt;orion.core.container.themes.provider&lt;/strong&gt; service can be found on the &lt;a href=&quot;https://wiki.eclipse.org/Orion/Documentation/Developer_Guide/Core_client_services#orion.core.container.themes.provider&quot;&gt;API documentation&lt;/a&gt; wiki page.&lt;/p&gt;
&lt;h3&gt;Multiple workspaces&lt;/h3&gt;
&lt;p&gt;The Orion platform now has support for multiple workspaces! This allows consumers of Orion to better organize their files by having multiple source repositories spread across multiple workspaces instead of one gigantic workspace filled with many unrelated repositories.&lt;/p&gt;
&lt;p&gt;By default Orion does not have end-user support to create and manage multiple workspaces, so third party support is required.&lt;/p&gt;
&lt;h2&gt;Node.js Server&lt;/h2&gt;
&lt;p&gt;A lot of work went into making the Node.js server more stable and making sure it was feature-complete compared to its Java version.&lt;/p&gt;
&lt;h3&gt;Git rebase skip support&lt;/h3&gt;
&lt;p&gt;Support for skipping conflicting commits during rebase has been added to the server.&lt;/p&gt;
&lt;h3&gt;Git squash support&lt;/h3&gt;
&lt;p&gt;The ability to squash commits into the index has been added to the server.&lt;/p&gt;
&lt;h2&gt;Move to Github&lt;/h2&gt;
&lt;p&gt;As we talked about in a previous post, during 15.0 we moved all of our source to Github. If this is the first time you are hearing about the move, then head &lt;a href=&quot;http://planetorion.org/news/2017/04/orion-moved-to-github/&quot;&gt;over to the post, and give it a read&lt;/a&gt;¬†for all the details about where to find our code and how to contribute.&lt;/p&gt;</description>
	<pubDate>Wed, 12 Jul 2017 19:32:08 +0000</pubDate>
</item>
<item>
	<title>Torkild Ulv√∏y Resheim: EclipseCon Europe 2017: Get your talk proposals in now!</title>
	<guid isPermaLink="false">https://resheim.net/?p=1831</guid>
	<link>https://resheim.net/2017/07/eclipsecon-europe-2017-get-your-talk-proposals-in-now.html</link>
	<description>&lt;p&gt;&lt;span class=&quot;wpsdc-drop-cap&quot;&gt;F&lt;/span&gt;or the twelfth year in a row there is an Eclipse conference in Germany this October ‚Äì I have to admit it‚Äôs my favourite conference; friendly faces everywhere, good food, awesome keynotes, great talks, and even a band to dance to during the reception.&lt;/p&gt;
&lt;p&gt;Again we expect more than 600 attendees in the lovely small town of Ludwigsburg, not far from Stuttgart. In order to fill three days with activities and interesting talks, we need your help. There is still a few days to get your submissions in, as the deadline is the 17th of July. So what we want you to do, is to sit down and type in a short abstract for something you would like to present. Look at the &lt;a href=&quot;https://www.eclipsecon.org/europe2017/cfp&quot;&gt;Call for Papers&lt;/a&gt;, to see if your idea can fit into one of the categories. Just go ahead and type away, let the program committee worry about whether or not your proposal is good enough. If your talk is selected, you will not have to pay the entrance fee and will have some leverage with your boss when discussing whether or not you can go. Oh, and you‚Äôll get a nice speakers T-Shirt &lt;img alt=&quot;üòÑ&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/2.2.1/72x72/1f604.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;See you there!&lt;/p&gt;

&lt;div class=&quot;twitter-share&quot;&gt;&lt;a class=&quot;twitter-share-button&quot; href=&quot;https://twitter.com/intent/tweet?url=https%3A%2F%2Fresheim.net%2F2017%2F07%2Feclipsecon-europe-2017-get-your-talk-proposals-in-now.html&amp;amp;via=torkildr&amp;amp;related=torkildr%3ATorkild&quot;&gt;Tweet&lt;/a&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 11 Jul 2017 21:19:18 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: EclipseCon 2017 ‚Äì last chance to submit a talk!</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=34828</guid>
	<link>https://eclipsesource.com/blogs/2017/07/11/eclipsecon-2017-last-chance-to-submit-a-talk/</link>
	<description>&lt;p&gt;The deadline for submitting to &lt;a href=&quot;https://www.eclipsecon.org/europe2017/&quot;&gt;EclipseCon Europe 2017&lt;/a&gt; is approaching. The last day is Monday, June 17. Please find the submission system¬†&lt;a href=&quot;https://www.eclipsecon.org/europe2017/cfp&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Don‚Äôt miss the chance to give a talk on a great event and share your thoughts with a wonderful audience!&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-medium wp-image-34830&quot; height=&quot;168&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2017/07/30507843421_ed8eea4b1a_z-300x168.jpg&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Are you a committer? Come and tell us what is new and noteworthy in your project! Are you involved with interesting web technologies or tools? Then choose our revised ‚ÄúWeb and Cloud Development‚Äù track. Do you use Eclipse as a basis for your own project? Submit your experience in the new category ‚ÄúBuild on Eclipse.‚Äù Are you a Java expert? Tell us about interesting topics related to Java and/or JDT! Please see &lt;a href=&quot;https://www.eclipsecon.org/europe2017/cfp&quot;&gt;here&lt;/a&gt; for a complete list of tracks.&lt;/p&gt;
&lt;p&gt;Most importantly, &lt;a href=&quot;https://www.eclipsecon.org/europe2017/cfp&quot;&gt;do it now&lt;/a&gt;!¬†Otherwise it will be too late!&lt;/p&gt;</description>
	<pubDate>Tue, 11 Jul 2017 16:24:10 +0000</pubDate>
</item>
<item>
	<title>itemis: How to fix Artop memory problems</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/how-to-fix-artop-memory-problems</guid>
	<link>https://blogs.itemis.com/en/how-to-fix-artop-memory-problems</link>
	<description>&lt;p&gt;In the automotive domain, itemis and others make intensive use of the community project &lt;strong&gt;Artop&lt;/strong&gt; (Autosar Tool Platform) ‚Äì an Eclipse (EMF) based &lt;strong&gt;implementation of the AUTOSAR meta-model&lt;/strong&gt;. Artop supports the conversion of models between the many revisions of the AUTOSAR standard.¬†&lt;/p&gt;  
&lt;p&gt;We have encountered situations, where an &lt;a href=&quot;https://www.artop.org/&quot;&gt;Artop&lt;/a&gt; based application needs huge amounts of memory ‚Äì here is an analysis of the technical reasons.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;AUTOSAR revision conversion: Illustration of brain concept with triangular grid&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Automotive/brain-concept-with-triangular-grid.jpg?t=1499778188397&amp;amp;width=724&amp;amp;name=brain-concept-with-triangular-grid.jpg&quot; style=&quot;width: 724px;&quot; title=&quot;AUTOSAR revision conversion: Illustration of brain concept with triangular grid&quot; width=&quot;724&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;AUTOSAR revisions and Artop revision conversion&lt;/h2&gt; 
&lt;p&gt;Any given product built on top of Artop will make use of a specific implementation of the AUTOSAR meta-model (e.g. 4.3.1). &lt;strong&gt;Artop supports the conversion between these revisions&lt;/strong&gt; upon loading and saving (i.e. from or to 4.3.0). In our case, the application is based on a custom built Artop for some internally used pre-released AUTOSAR versions. We work on a revision called 4.3.1, but we also have to save 4.3.0.&lt;/p&gt; 
&lt;p&gt;Upon saving Artop will do a conversion in the following steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The standard Eclipse/EMF implementation will create a memory-optimized XML-representation of the AUTOSAR model (a XMLStringImpl instance). This is used to avoid duplication of string values.&lt;/li&gt; 
 &lt;li&gt;Artop will then take this as an input and create a JDOM representation of the XML internally.&lt;/li&gt; 
 &lt;li&gt;Artop will invoke the revision converter for all elements of the JDOM tree, to allow for conversion (this is specific for each combination of from/to revisions).&lt;/li&gt; 
 &lt;li&gt;Artop will finally serialize the resulting JDOM to disk as XML.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;With production data, we have seen Artop consume huge amounts of memories. One of the reasons is the JDOM representation as created in Step 2.&lt;/p&gt; 
&lt;h2&gt;Quickfix&lt;/h2&gt; 
&lt;p&gt;Obviously the quickest fix is to increase the memory available to the JVM with the -Xmx option. However, we still had memory problems and have started to create patches for Artop.&lt;/p&gt; 
&lt;h2&gt;Minimal invasive fix&lt;/h2&gt; 
&lt;p&gt;We have &lt;strong&gt;several approaches&lt;/strong&gt;, with different impacts on Artop architecture. Our first fix concentrates on &lt;strong&gt;minimizing the memory required&lt;/strong&gt; by the JDOM model. It seems that the JDOM creation is not memory optimized and each JDOM element created uses its own string instances. JDOM2 provides a JDOM builder with string caching, which is not available to us. So we created our own implementation making use of Java 7 / Java 8's improved String interning.&lt;/p&gt; 
&lt;p&gt;While we were at it, &lt;strong&gt;we also simplified Artop a bit&lt;/strong&gt;: The original code uses an additional thread (for technical reasons) for creating the JDOM ‚Äì we were able to remove that by implementing a simple Reader class that takes data directly from the XMLStringImpl.&lt;/p&gt; 
&lt;h2&gt;Possible Redesign&lt;/h2&gt; 
&lt;p&gt;Since EMF does not only support using the XMLStringImpl for serialization, but also using the DOM classes from the w3c packages, it could be an optimization to use those directly. But since the conversion APIs are based on JDOM, this will need API changes (converting w3c DOM to JDOM does not seem to be an option, since we would be duplicating DOM trees, again).&lt;/p&gt; 
&lt;h2&gt;Result&lt;/h2&gt; 
&lt;p&gt;In a combination of increasing available memory and reducing the memory footprint with our patches, &lt;strong&gt;we resolved the out-of-memory issues&lt;/strong&gt;. In situations like these, we not only built products and toolchains on top of Artop, but also work actively to improve the overall code base for the community.&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;You want to learn more about our projects in the automotive domain?&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span&gt;&lt;a class=&quot;cta_button&quot; href=&quot;https://info.itemis.com/cs/ci/?pg=0882ae9d-87ed-4053-83de-4e9896c6a4b8&amp;amp;pid=761475&amp;amp;ecid=&amp;amp;hseid=&amp;amp;hsic=&quot;&gt;&lt;img align=&quot;middle&quot; alt=&quot;Check our blog for more information&quot; class=&quot;hs-cta-img &quot; src=&quot;https://no-cache.hubspot.com/cta/default/761475/0882ae9d-87ed-4053-83de-4e9896c6a4b8.png&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;¬†&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fhow-to-fix-artop-memory-problems&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 11 Jul 2017 13:30:00 +0000</pubDate>
	<author>graf@itemis.de (Andreas Graf)</author>
</item>
<item>
	<title>Eclipse Announcements: EclipseCon Europe 2017 | Submissions Close in One Week</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/OBIwTGG4sA4/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/OBIwTGG4sA4/</link>
	<description>There‚Äôs still time until July 17th, to get your submission in for this year‚Äôs EclipseCon Europe in Ludwigsburg Germany.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/OBIwTGG4sA4&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 10 Jul 2017 13:05:00 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: EclipseSource Oomph Profile ‚Äì updated to Oxygen</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=34735</guid>
	<link>https://eclipsesource.com/blogs/2017/07/07/eclipsesource-oomph-profile-updated-to-oxygen/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Last week, Oxygen has been release, a new major version of the Eclipse IDE. It contains many useful improvements, so it is worth to update. In case you use our EclipseSource Oomph profile (see &lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2015/08/17/introducing-the-eclipsesource-oomph-profile/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;here&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; for more details), you should get a notification and Oomph will apply the update automatically. If you do not get the notification, just navigate to the menu entry ‚ÄúWindow‚Äù =&amp;gt; ‚ÄúPerform Set-Up Task‚Äù.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;This will automatically update all plugins to Oxygen, but keep all existing settings untouched.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-medium wp-image-34736&quot; height=&quot;201&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2017/07/image1-300x201.png&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In the meantime, we added one new default setting to our EclipseSource profile:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-medium wp-image-34737&quot; height=&quot;132&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2017/07/image2-300x132.png&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;This will include all bundles when using the ‚ÄúOpen Type‚Äù dialog, not only the ones in the current scope.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Have fun with Oxygen!&lt;/span&gt;&lt;/p&gt;</description>
	<pubDate>Fri, 07 Jul 2017 08:28:11 +0000</pubDate>
</item>
<item>
	<title>typefox.io: Linking Xtext Models With EMF Models</title>
	<guid isPermaLink="false">http://typefox.io/?p=14283</guid>
	<link>http://typefox.io/linking-xtext-models-with-other-emf-models</link>
	<description>&lt;div class=&quot;fusion-fullwidth fullwidth-box nonhundred-percent-fullwidth&quot; style=&quot;background-color: rgba(255,255,255,0); background-position: center center; padding-top: 20px; padding-right: 0px; padding-bottom: 20px; padding-left: 0px;&quot;&gt;&lt;div class=&quot;fusion-builder-row fusion-row &quot;&gt;&lt;div class=&quot;fusion-layout-column fusion_builder_column fusion_builder_column_1_1  fusion-one-full fusion-column-first fusion-column-last 1_1&quot; style=&quot;margin-top: 0px; margin-bottom: 20px;&quot;&gt;
			&lt;div class=&quot;fusion-column-wrapper&quot;&gt;
				&lt;blockquote&gt;&lt;p&gt;This article shows the necessary steps to enable cross-references between Xtext models and other EMF based models. It focusses on the linking aspects, and keeps things like the synchronization, transactions, singleton editing domains, dirty-state handling etc. aside. So for a full integration, let‚Äôs say with Sirius, this is only one part of the story.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are often good reasons to describe different parts of an EMF model in different notations, e.g. textual and graphical. To connect resources with different notations we can use EMF cross-references. Via the &lt;em&gt;&lt;a href=&quot;https://github.com/eclipse/xtext-core/blob/master/org.eclipse.xtext/src/org/eclipse/xtext/resource/XtextResource.java&quot;&gt;XtextResource&lt;/a&gt;&lt;/em&gt;, Xtext hides the entire process of parsing (text to EMF) and serialization (EMF to text) behind EMF‚Äôs resource API. So in theory, cross-references between Xtext and other EMF-based models should work out-of-the-box, shouldn‚Äôt they?&lt;/p&gt;
&lt;p&gt;Unfortunately, there is one big difference: Xtext uses names to refer to an element, while EMF uses URIs. This blogpost is about how to get cross-references working anyway.&lt;/p&gt;
&lt;h3&gt;The Example&lt;/h3&gt;
&lt;p&gt;We‚Äôve put an &lt;a href=&quot;https://github.com/TypeFox/Xtext-XMI&quot;&gt;example on Github&lt;/a&gt;, where we use simple &lt;a href=&quot;https://github.com/TypeFox/Xtext-XMI/blob/master/io.typefox.xtextxmi.tree/model/Tree.ecore&quot;&gt;Ecore model for trees&lt;/a&gt; and an &lt;a href=&quot;https://github.com/TypeFox/Xtext-XMI/blob/master/io.typefox.xtextxmi.xtree/src/io/typefox/xtextxmi/xtree/Xtree.xtext&quot;&gt;Xtext grammar&lt;/a&gt; on the same model.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Screen Shot 2017-07-06 at 13.51.58&quot; class=&quot;alignnone size-medium wp-image-14296&quot; height=&quot;188&quot; src=&quot;http://typefox.io/wp-content/uploads/2017/07/Screen-Shot-2017-07-06-at-13.51.58-300x188.png&quot; width=&quot;300&quot; /&gt;&lt;img alt=&quot;Screen Shot 2017-07-06 at 13.55.19&quot; class=&quot;alignnone size-medium wp-image-14297&quot; height=&quot;182&quot; src=&quot;http://typefox.io/wp-content/uploads/2017/07/Screen-Shot-2017-07-06-at-13.55.19-300x182.png&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In our setup, we can define tree models either in XMI using the generated EMF tree editor (file extension &lt;em&gt;tree&lt;/em&gt;) or textually in an Xtext (file extension &lt;em&gt;xtree&lt;/em&gt;), and establish cross-references between the models of both notations. The screenshot shows an XMI-based model on the left and an Xtext-based on the right refering to each other.&lt;br /&gt;
&lt;img alt=&quot;Cross-references between Xtext and XMI&quot; class=&quot;aligncenter wp-image-14284 size-large&quot; height=&quot;367&quot; src=&quot;http://typefox.io/wp-content/uploads/2017/07/Screen-Shot-2017-07-06-at-12.35.19-1024x367.png&quot; width=&quot;1024&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt;Cross-References from Xtext to XMI&lt;/h3&gt;
&lt;p&gt;To resolve a cross-reference to an element, Xtext takes the name given in the text to look up the referred element in a &lt;em&gt;scope&lt;/em&gt;. You can think of a scope as a table of all candidates for a certain cross-reference with their name in a specific context. Scopes are usually chained, such that if the current scope does not yield a result for a given name, it asks its &lt;em&gt;parent scope&lt;/em&gt; and so on. The top-most parent scope is called the &lt;em&gt;global scope&lt;/em&gt;. It provides all elements from all reachable resources that would be referable at that specific location. It is usually backed by the &lt;em&gt;Xtext index&lt;/em&gt;, which stores descriptions of all externally referable elements for each resource. The index is populated by the &lt;em&gt;Xtext builder&lt;/em&gt;, which automatically syncs the index data on file changes. This is why you should never deactivate automatic builds for an Xtext project. More information on scoping can be found in the &lt;a href=&quot;https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping&quot;&gt;Xtext documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Given the above, in order to refer to XMI from Xtext we have to create index entries for the elements of the XMI-based model. This is achieved by registering a new language for the &lt;em&gt;*.tree&lt;/em&gt; resources to the Xtext infrastructure, thus providing services like indexing and name computation. In the example, we created a separate &lt;a href=&quot;https://github.com/TypeFox/Xtext-XMI/tree/master/io.typefox.xtextxmi.tree.xtext&quot;&gt;plug-in project for the Xtext language registration&lt;/a&gt;. You could of course put that code in an existing plug-in as well. or you might want to put runtime and UI parts into separate plug-ins.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Implement a &lt;em&gt;&lt;a href=&quot;https://github.com/TypeFox/Xtext-XMI/blob/master/io.typefox.xtextxmi.tree.xtext/src/io/typefox/xtextxmi/tree/xtext/TreeRuntimeModule.xtend&quot;&gt;TreeRuntimeModule&lt;/a&gt;&lt;/em&gt; inheriting from &lt;em&gt;AbstractGenericResourceRuntimeModule&lt;/em&gt; and implement the missing methods. This class is used to configure the runtime dependency injection (DI) container for this language. If you want to override non-UI services you can do this here.&lt;br /&gt;
In our example, we override the &lt;em&gt;IQualifiedNameProvider &lt;/em&gt;to yield fully qualified names, i.e. &lt;em&gt;Root.Child&lt;/em&gt; instead of just &lt;em&gt;Child&lt;/em&gt; in the above example to avoid name collisions.&lt;/li&gt;
&lt;li&gt;Implement a &lt;em&gt;&lt;a href=&quot;https://github.com/TypeFox/Xtext-XMI/blob/master/io.typefox.xtextxmi.tree.xtext/src/io/typefox/xtextxmi/tree/xtext/ui/TreeUiModule.xtend&quot;&gt;TreeUiModule&lt;/a&gt;&lt;/em&gt; inheriting from &lt;em&gt;EmfUiModule&lt;/em&gt;. This is the DI config for all Eclipse-based services.&lt;br /&gt;
In the example, we added an &lt;a href=&quot;https://github.com/TypeFox/Xtext-XMI/blob/master/io.typefox.xtextxmi.tree.xtext/src/io/typefox/xtextxmi/tree/xtext/ui/TreeEditorOpener.xtend&quot;&gt;editor opener&lt;/a&gt; that opens the EMF tree editor when the user follows a reference to an XMI-defined tree element in the Xtext editor.&lt;/li&gt;
&lt;li&gt;Implement a plug-in &lt;a href=&quot;https://github.com/TypeFox/Xtext-XMI/blob/master/io.typefox.xtextxmi.tree.xtext/src/io/typefox/xtextxmi/tree/xtext/ui/Activator.xtend&quot;&gt;&lt;em&gt;Activator&lt;/em&gt;&lt;/a&gt; (inheriting from &lt;em&gt;AbstractUIPlugin&lt;/em&gt;) that creates the injector based on the &lt;em&gt;TreeUiModule&lt;/em&gt;, the &lt;em&gt;TreeRuntimeModule&lt;/em&gt; and the common &lt;em&gt;SharedStateModule&lt;/em&gt; on &lt;em&gt;start(). &lt;/em&gt;Make sure to register the &lt;em&gt;Activator&lt;/em&gt; in the &lt;a href=&quot;https://github.com/TypeFox/Xtext-XMI/blob/master/io.typefox.xtextxmi.tree.xtext/META-INF/MANIFEST.MF&quot;&gt;&lt;em&gt;MANIFEST.MF&lt;/em&gt;&lt;/a&gt;.&lt;em&gt;&lt;br /&gt;
&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Implement an &lt;a href=&quot;https://github.com/TypeFox/Xtext-XMI/blob/master/io.typefox.xtextxmi.tree.xtext/src/io/typefox/xtextxmi/tree/xtext/ui/TreeExecutableExtensionFactory.xtend&quot;&gt;&lt;em&gt;TreeExecutableExtensionFactory&lt;/em&gt;&lt;/a&gt; that extends &lt;em&gt;AbstractGuiceAwareExecutableExtensionFactory&lt;/em&gt; and delivers both the bundle and the injector from the &lt;em&gt;Activator&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;In the &lt;a href=&quot;https://github.com/TypeFox/Xtext-XMI/blob/master/io.typefox.xtextxmi.tree.xtext/plugin.xml&quot;&gt;&lt;em&gt;plugin.xml&lt;/em&gt;&lt;/a&gt;, register your language to the extension point &lt;em&gt;org.eclipse.xtext.extension_resourceServiceProvider&lt;/em&gt; with the &lt;em&gt;uriExtension tree&lt;/em&gt; and an instance of &lt;em&gt;EmfResourceUIServiceProvider&lt;/em&gt; created via the &lt;em&gt;TreeExecutableExtensionFactory&lt;/em&gt; from the previous step.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You could skip step 2 to 5 if you don‚Äôt need Eclipse support. If you want to have the same functionality in a plain Java process, you have to manually create the injector and initialize the EMF registries, as we did in the &lt;a href=&quot;https://github.com/TypeFox/Xtext-XMI/blob/master/io.typefox.xtextxmi.tree.xtext/src/io/typefox/xtextxmi/tree/xtext/TreeStandaloneSetup.xtend&quot;&gt;&lt;em&gt;TreeStandaloneSetup&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Cross-References from XMI to Xtext&lt;/h3&gt;
&lt;p&gt;As opposed to names in Xtext, EMF uses &lt;em&gt;URIs&lt;/em&gt; to refer to elements. In XMI, the standard serialization format for EMF models, a cross-ref becomes an &lt;em&gt;href&lt;/em&gt; with the URI of the referred element. The URI consists of the URI of the resource where the element is defined in, followed by the fragment which is a resource unique string identifier of the element, e.g.&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;href=&quot;MyXtextTree.xtree#//@children.1&quot;&lt;/pre&gt;&lt;p&gt;
The &lt;em&gt;XtextResource&lt;/em&gt; delivers such URIs for all contained elements by default. These URIs are picked up by referring XMI resources, so it seems like this works out-of-the-box. But the problems begin as soon as you start modifying the referred Xtext resource.&lt;/p&gt;
&lt;p&gt;The default algorithm for computing the fragments uses an Xpath expression, navigating the containment features from the root element by name &lt;em&gt;(children)&lt;/em&gt; and index &lt;em&gt;(1)&lt;/em&gt;. This approach delivers unique fragments for all elements in a resource without relying on a name or a unique ID attribute. The disadvantage is, that it assumes that the position of an element in the content tree is fixed. When we switch the order of &lt;em&gt;Bar&lt;/em&gt; and &lt;em&gt;Baz&lt;/em&gt; in the example, their path fragments would be switched as well, screwing up existing URI references to them.&lt;/p&gt;
&lt;p&gt;If you want the same linking semantics as in Xtext, the fragment should encode the fully qualified name of the element. Xtext allows you to customise that by implementing your own &lt;em&gt;IFragmentProvider&lt;/em&gt;. In the example, we have added our own &lt;a href=&quot;https://github.com/TypeFox/Xtext-XMI/blob/master/io.typefox.xtextxmi.xtree/src/io/typefox/xtextxmi/xtree/resource/XtreeFragmentProvider.xtend&quot;&gt;&lt;em&gt;XtreeFragmentProvider&lt;/em&gt;&lt;/a&gt; and bound it in the &lt;em&gt;XtreeRuntimeModule&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Additionally we might want to include the element‚Äôs &lt;em&gt;EClass&lt;/em&gt;, because elements of different types in the same model could have the same name. Then, there can be multiple &lt;em&gt;EClasses&lt;/em&gt; in different &lt;em&gt;EPackages&lt;/em&gt; with the same name, so a complete generic solution for the fragment would be a fully qualified &lt;em&gt;EClass&lt;/em&gt; name followed by a fully qualified element name‚Ä®, ‚Ä®that is&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;href=&quot;[resource URI]#[EPackage nsURI][separator][EClass name][separator][EObject FQN]&quot;&lt;/pre&gt;&lt;p&gt;
e.g&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;href=&quot;‚Ä®./MyXtextTree.xtree#http://www.typefox.io/xtextxmi/tree+Node+Foo.Bar&quot;&lt;/pre&gt;&lt;p&gt;
This is a lot of information to be packed into a string. We also must sure we don‚Äôt break encoding rules. So it may be better to go for a less general, domain-specific solution as we did in the example.&lt;/p&gt;
&lt;p&gt;Another problem is the resource part of the URI: In Xtext, a referrer does not care in which resource the cross-referenced element is. Moving an element to a different Xtext resource would break all URI-based links to it, while the name-based links stay intact. A possible solution would be to implement a move refactoring for Xtext elements. That is beyond the scope of this article.&lt;/p&gt;
&lt;h3&gt;A Word on Rename Refactoring&lt;/h3&gt;
&lt;p&gt;In URI-based linking, renaming an element will not change a cross reference, as long as the fragments don‚Äôt involve the name. With our approach, the links to the Xtext resource are susceptible to such renames.&lt;/p&gt;
&lt;p&gt;The good news is that by registering the &lt;em&gt;tree&lt;/em&gt; language to Xtext as we did above, cross-references to Xtext elements will be automatically updated when the user triggers a rename refactoring on them.&lt;/p&gt;
&lt;p&gt;The bad news is that the links from Xtext to XMI will break when an XMI element is renamed, let‚Äôs say in the EMF tree editor. It is up to the implementor of the editor to trigger the a rename refactoring for referring Xtext resources on such user actions if that is the intended behavior. Luckily, broken links from Xtext to XMI will just be marked as errors and can be easily fixed by hand.&lt;/p&gt;
&lt;div class=&quot;fusion-clearfix&quot;&gt;&lt;/div&gt;
			&lt;/div&gt;
		&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 06 Jul 2017 12:43:39 +0000</pubDate>
</item>
<item>
	<title>Frank Appel: Clean Sheet Update for Eclipse Oxygen</title>
	<guid isPermaLink="false">https://facon-biz.prossl.de/?p=13391</guid>
	<link>http://www.codeaffine.com/2017/07/06/clean-sheet-update-eclipse-oxygen/</link>
	<description>&lt;p&gt;Written by &lt;a href=&quot;http://www.codeaffine.com/author/fappel/&quot; rel=&quot;nofollow&quot;&gt;Frank Appel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In celebration of the latest Eclipse release, there is a Clean Sheet Update for Eclipse Oxygen available. Congratulations and a big ‚Äòthank you‚Äô to all the diligent Eclipse committers and contributors that made the Oxygen version happen, great work! The Clean Sheet Update for Eclipse Oxygen primarily ensures compatibility but provides also a minor facelift and bug fix. The current version is 0.6.0. Note that this release drops support for Eclipse Mars (4.5).&lt;/p&gt;
&lt;p&gt;¬†&lt;/p&gt;
&lt;div class=&quot;notification lock cannothide&quot;&gt;&lt;div class=&quot;boximg infoimg&quot;&gt;&lt;/div&gt;&lt;h2&gt;The Clean Sheet Eclipse Design&lt;/h2&gt;

In case you've missed out on the topic and you are wondering what I'm talking about, here is a screenshot of my real world setup using the Clean Sheet theme (click on the image to enlarge).

&lt;a href=&quot;http://fappel.github.io/xiliary/clean-sheet-screenshot.html&quot;&gt;&lt;img alt=&quot;Eclipse IDE Look and Feel: Clean Sheet Screenshot&quot; class=&quot;alignnone size-full wp-image-12279&quot; height=&quot;408&quot; src=&quot;http://www.codeaffine.com/wp-content/uploads/2015/11/clean-sheet-eclipse-theme.png&quot; width=&quot;850&quot; /&gt;&lt;/a&gt;

For more information please refer to the features landing page at &lt;a href=&quot;http://fappel.github.io/xiliary/clean-sheet.html&quot; target=&quot;_blank&quot;&gt;http://fappel.github.io/xiliary/clean-sheet.html&lt;/a&gt;, read the introductory Clean Sheet feature description &lt;a href=&quot;http://www.codeaffine.com/2015/11/04/clean-sheet-an-ergonomic-eclipse-theme-for-windows-10/&quot;&gt;blog post&lt;/a&gt;, and check out the &lt;a href=&quot;http://fappel.github.io/xiliary/clean-sheet-new-and-noteworthy.html&quot; target=&quot;_blank&quot;&gt;New &amp;amp; Noteworthy&lt;/a&gt; page.&lt;/div&gt;
&lt;p&gt;¬†&lt;/p&gt;
&lt;h2&gt;Minor Facelift of Main Toolbar&lt;/h2&gt;
&lt;p&gt;The main toolbar has been lightened up a bit to show off the action icons to their best advantage.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Clean Sheet Update for Eclipse Oxygen: Toolbar Facelift&quot; class=&quot;alignnone size-full wp-image-13396&quot; height=&quot;271&quot; src=&quot;http://www.codeaffine.com/wp-content/uploads/2017/07/face-lift-main-toolbar.png&quot; width=&quot;417&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Java Editor Font Size on Mac&lt;/h2&gt;
&lt;p&gt;The default Java editor font-size on Mac OS has been increased due to remarks that it was a bit too small with previous versions.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Clean Sheet Update for Eclipse Oxygen: Default Font Size Mac OS&quot; class=&quot;alignnone size-full wp-image-13405&quot; height=&quot;248&quot; src=&quot;http://www.codeaffine.com/wp-content/uploads/2017/07/default-editor-font-size-mac.png&quot; width=&quot;516&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;On a Final Note, ‚Ä¶&lt;/h2&gt;
&lt;p&gt;Of course, it‚Äôs interesting to hear suggestions or find out about potential issues that need to be resolved. In particular, as it‚Äôs not possible to test all available features with a new IDE version. Feel free to use the &lt;a href=&quot;https://github.com/fappel/xiliary/issues&quot; target=&quot;_blank&quot;&gt;Xiliary Issue Tracker&lt;/a&gt; or the comment section below for reporting.&lt;/p&gt;
&lt;p&gt;With this in mind, I‚Äôd like to thank all adopters for the support and hope the Clean Sheet Update for Eclipse Oxygen will continue to measure up to your expectations &lt;img alt=&quot;üòâ&quot; class=&quot;wp-smiley&quot; src=&quot;http://s.w.org/images/core/emoji/72x72/1f609.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;http://www.codeaffine.com/2017/07/06/clean-sheet-update-eclipse-oxygen/&quot; rel=&quot;nofollow&quot;&gt;Clean Sheet Update for Eclipse Oxygen&lt;/a&gt; appeared first on &lt;a href=&quot;http://www.codeaffine.com&quot; rel=&quot;nofollow&quot;&gt;Code Affine&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Thu, 06 Jul 2017 12:05:44 +0000</pubDate>
</item>
<item>
	<title>Mikael Barbero: Chromium / Eclipse SWT integration</title>
	<guid isPermaLink="false">https://medium.com/p/c61f416e97d1</guid>
	<link>https://medium.com/@mikael.barbero/chromium-eclipse-swt-integration-c61f416e97d1?source=rss-4a3bd8487ad8------2</link>
	<description>&lt;blockquote&gt;&lt;em&gt;Key takeaways:&lt;/em&gt;&lt;/blockquote&gt;&lt;blockquote&gt;Do you want to see a Chromium based SWT Browser implementation? &lt;a href=&quot;https://www.eclipse.org/donate/&quot;&gt;&lt;strong&gt;Please donate&lt;/strong&gt;&lt;/a&gt; (or &lt;a href=&quot;mailto:mikael.barbero@eclipse-foundation.org&quot;&gt;reach out to me if you want to do corporate donations&lt;/a&gt;) and the Eclipse Foundation will &lt;a href=&quot;https://docs.google.com/document/d/1xpLxquAZd6SGDK7XvYHoj2g_PBnnBX8SFhgwIJPv7lg/edit&quot;&gt;&lt;strong&gt;make it happens&lt;/strong&gt;&lt;/a&gt; via the &lt;a href=&quot;https://www.eclipse.org/contribute/dev_program.php&quot;&gt;Friends of Eclipse Enhancement Program¬†(FEEP)&lt;/a&gt;.&lt;/blockquote&gt;&lt;p&gt;Browser support in SWT has always been a complicated story. By default (meaning without any hint from the application developers and the users), SWT relies on ‚Äúnative‚Äù renderers (Internet Explorer on Windows, WebKit on macOS and WebKitGTK+ or Mozilla/XULRunner on Linux). While supporting different rendering of pages in the Web is common, it‚Äôs annoying when you develop a desktop application where the Browser component is used to render things that Web technologies can do better than SWT (CSS, SVG, WebGL, etc.). Not only that, but you would expect high performance from the renderer for such¬†usage.&lt;/p&gt;&lt;p&gt;To mitigate these discrepancies, developers can provide some hints to the SWT framework about which renderer (WebKit or Mozilla/XULRunner) it should use. Unfortunately, XULRunner is deprecated and is no longer &lt;a href=&quot;https://groups.google.com/forum/?_escaped_fragment_=msg/mozilla.dev.platform/_rFMunG2Bgw/C-4PcHj9IgAJ#!msg/mozilla.dev.platform/_rFMunG2Bgw/C-4PcHj9IgAJ&quot;&gt;built/shipped by the Mozilla team&lt;/a&gt;. WebKit is staying, but it brings its own couple of issues when one tries to use it on all platforms:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;On Windows, it requires users to have Safari installed. As you may know, &lt;a href=&quot;http://appleinsider.com/articles/12/07/25/apple_kills_windows_pc_support_in_safari_60&quot;&gt;Apple has silently killed Safari on Windows&lt;/a&gt; back in 2012. Moreover, Safari was only available on 32 bits Windows systems. All in all, you don‚Äôt really have a choice: you need to rely on the Internet Explorer renderer when using¬†Windows.&lt;/li&gt;&lt;li&gt;On Linux, it can be difficult to setup a proper working combination of WebKitGTK and GTK+. It is especially true for older Eclipse versions on Linux distros which change GTK+ internals (hello Ubuntu!).&lt;/li&gt;&lt;li&gt;On macOS, it just works‚Ñ¢, as expected (it would have been a surprise where the system renderer is WebKit¬†itself).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;For more details on the compatibility of all platforms, you should read the &lt;a href=&quot;https://www.eclipse.org/swt/faq.php#whatisbrowser&quot;&gt;Browser section of the SWT¬†FAQ&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;One solution that has been studied further is implementing the SWT Browser widget on top of the JavaFX browser component (WebView). Unfortunately, it has some compatibility issues with GTK+ versions. Furthermore, &lt;a href=&quot;https://stackoverflow.com/a/10763261&quot;&gt;it is reported to be slow&lt;/a&gt; and to &lt;a href=&quot;https://stackoverflow.com/a/38860579&quot;&gt;have trouble rendering modern HTML pages&lt;/a&gt; due to the usage of an old version of WebKitGTK.&lt;/p&gt;&lt;p&gt;So &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=405031&quot;&gt;here comes the idea&lt;/a&gt; to embed &lt;a href=&quot;https://www.chromium.org&quot;&gt;Chromium&lt;/a&gt; (the open source project behind the Google Chrome browser). It is available on all major platforms (Windows, Linux and macOS), it is known for its high performance and high quality rendering. On top of that, most of the Chromium packaging for embedding is done by the &lt;a href=&quot;https://bitbucket.org/chromiumembedded/cef&quot;&gt;Chromium Embedded Framework (CEF)&lt;/a&gt;. CEF is quite successful and is used by some famous applications like &lt;a href=&quot;https://spotify.com&quot;&gt;Spotify&lt;/a&gt;, &lt;a href=&quot;http://store.steampowered.com&quot;&gt;Steam Client&lt;/a&gt; and &lt;a href=&quot;http://evernote.com&quot;&gt;Evernote&lt;/a&gt;. It is also the foundation of the &lt;a href=&quot;https://electron.atom.io&quot;&gt;Electron project&lt;/a&gt; (extracted from the text editor Atom). It is so successful and widespread that the Mozilla Foundation‚Äôs new renderer (&lt;a href=&quot;https://servo.org&quot;&gt;Servo&lt;/a&gt;/&lt;a href=&quot;https://wiki.mozilla.org/Quantum&quot;&gt;Quantum&lt;/a&gt;) &lt;a href=&quot;https://blogs.s-osg.org/servo-the-embeddable-browser-engine/&quot;&gt;has adopted the CEF API for developers to embed¬†it&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;There have been several attempts to bring CEF to Java and SWT, but none were really successful. The &lt;a href=&quot;https://www.eclipse.org/org/&quot;&gt;Eclipse Foundation&lt;/a&gt; has been looking for talented developers to take over these efforts and to make it happen. Thanks to the &lt;a href=&quot;https://www.eclipse.org/contribute/dev_program.php&quot;&gt;Friends of Eclipse Enhancement Program&lt;/a&gt;, a &lt;a href=&quot;https://projects.eclipse.org/development_effort/implement-swtchromium-integration&quot;&gt;call for bidding has been created&lt;/a&gt; in early 2017. The awesome people from &lt;a href=&quot;http://www.wemaketechnology.com&quot;&gt;Make Technology&lt;/a&gt; have replied to it and demonstrated that they have the skills to do it. They already have a working prototype in the following GitHub repositories:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/maketechnology/cefswt&quot;&gt;https://github.com/maketechnology/cefswt&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/maketechnology/cefrust&quot;&gt;https://github.com/maketechnology/cefrust&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;They also have a rock &lt;a href=&quot;https://docs.google.com/document/d/1xpLxquAZd6SGDK7XvYHoj2g_PBnnBX8SFhgwIJPv7lg/edit?usp=sharing&quot;&gt;solid plan&lt;/a&gt; and they have created umbrella bugs for each milestone of this¬†work:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=516849&quot;&gt;https://bugs.eclipse.org/bugs/show_bug.cgi?id=516849&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=516850&quot;&gt;https://bugs.eclipse.org/bugs/show_bug.cgi?id=516850&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=516852&quot;&gt;https://bugs.eclipse.org/bugs/show_bug.cgi?id=516852&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=516853&quot;&gt;https://bugs.eclipse.org/bugs/show_bug.cgi?id=516853&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=516854&quot;&gt;https://bugs.eclipse.org/bugs/show_bug.cgi?id=516854&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This requires an enormous amount of work and unfortunately, we did not receive enough donations this year to fund the project. &lt;strong&gt;If you want to see this work happen for the Eclipse Platform, &lt;/strong&gt;&lt;a href=&quot;https://www.eclipse.org/donate/&quot;&gt;&lt;strong&gt;please donate&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; or &lt;/strong&gt;&lt;a href=&quot;mailto:mikael.barbero@eclipse-foundation.org&quot;&gt;&lt;strong&gt;reach out to me if you want to do corporate donations&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;, &lt;/strong&gt;or to learn more about corporate donations.&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=c61f416e97d1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 04 Jul 2017 14:27:01 +0000</pubDate>
</item>
<item>
	<title>vert.x project: OpenAPI (fka Swagger) 3 support in Eclipse Vert.x now in test stage!</title>
	<guid isPermaLink="true">http://vertx.io/blog/openapi-fka-swagger-3-support-in-eclipse-vert-x-now-in-test-stage</guid>
	<link>http://vertx.io/blog/openapi-fka-swagger-3-support-in-eclipse-vert-x-now-in-test-stage</link>
	<description>&lt;article&gt;&lt;p&gt;As GSoC 2017‚Äôs student, I‚Äôm actually working on an embedded support to OpenAPI 3 standard inside Eclipse Vert.x framework. Now, after a lot of work, you can try it!&lt;/p&gt;
&lt;h2 id=&quot;why-openapi-3-&quot;&gt;Why OpenAPI 3?&lt;/h2&gt;
&lt;p&gt;OpenAPI 2 is the most important industry-grade standard for API Specifications. As you can see on &lt;a href=&quot;https://www.openapis.org/blog/2017/05/25/the-open-api-initiative-is-sending-you-a-save-the-date-card?utm_source=Blog&amp;amp;utm_medium=Twitter&amp;amp;utm_campaign=SaveTheDate&quot;&gt;official blog of OpenAPI Initiative&lt;/a&gt;, the release of version 3 is behind the corner, so we want to give to our community the latest tools for the latest standards!&lt;/p&gt;
&lt;p&gt;Vert.x project objective is to give you more integrated tools. With this new support, it gives you the ability to use the &lt;a href=&quot;https://swaggerhub.com/blog/api-design/design-first-or-code-first-api-development/&quot;&gt;Design Driven&lt;/a&gt; (or Design First) approach &lt;strong&gt;without loading any thirds parties libraries&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;
&lt;p&gt;The actually supported features are the following (we refeer to document Version 3.0.0-rc2):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OpenAPI 3 compliant API specification validation (thanks to &lt;a href=&quot;https://github.com/RepreZen/KaiZen-OpenApi-Parser&quot;&gt;Kaizen-OpenApi-Parser&lt;/a&gt;) with &lt;strong&gt;loading of external Json schemas&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Automatic request validation&lt;/li&gt;
&lt;li&gt;Automatic mount of security validation handlers&lt;/li&gt;
&lt;li&gt;Automatic 501 response for not implemented operations&lt;/li&gt;
&lt;li&gt;Router factory to provide all this features to users&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Automatic request validation is provided by a new handler: &lt;code&gt;ValidationHandler&lt;/code&gt;. You can also define your own &lt;code&gt;ValidationHandler&lt;/code&gt; without API specifications, but I will discuss it later.&lt;/p&gt;
&lt;p&gt;The request validation (provided by subclass &lt;code&gt;OpenAPI3RequestValidationHandler&lt;/code&gt;) actually supports:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Parameters defined in &lt;a href=&quot;https://github.com/OAI/OpenAPI-Specification/blob/OpenAPI.next/versions/3.0.md#parameter-object&quot;&gt;Parameter object&lt;/a&gt;. We support every type of parameter, including &lt;code&gt;object&lt;/code&gt; and &lt;code&gt;array&lt;/code&gt;. We also support every type description field (for example &lt;code&gt;format&lt;/code&gt;, &lt;code&gt;minimum&lt;/code&gt;, &lt;code&gt;maximum&lt;/code&gt;, etc). Also, at the moment, we support every combination of &lt;code&gt;style&lt;/code&gt; and &lt;code&gt;explode&lt;/code&gt; field (excluded styles &lt;code&gt;matrix&lt;/code&gt; and &lt;code&gt;label&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Body defined in new &lt;a href=&quot;https://github.com/OAI/OpenAPI-Specification/blob/OpenAPI.next/versions/3.0.md#request-body-object&quot;&gt;RequestBody object&lt;/a&gt;. In particular:&lt;ul&gt;
&lt;li&gt;For &lt;code&gt;application/json&lt;/code&gt; the validation handler will take schema that you have defined in &lt;code&gt;schema&lt;/code&gt; object and will validate json bodies with it&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; and &lt;code&gt;multipart/form-data&lt;/code&gt; the validation handler will take care of validate every parameters in form attributes. It actually supports only comma separated values for &lt;code&gt;object&lt;/code&gt; and &lt;code&gt;arrays&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For other parameter types it will check &lt;code&gt;Content-Type&lt;/code&gt; header&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Request validation errors will be carried with &lt;code&gt;RoutingContext&lt;/code&gt; encapsulated in an object called &lt;code&gt;ValidationHandler&lt;/code&gt;, so you have to attach failure handler to check if something went wrong during validation. Also the &lt;code&gt;RoutingContext&lt;/code&gt; carry a new object called &lt;code&gt;RequestParameters&lt;/code&gt; that encapsulate all request parameters deserialized and parsed.&lt;/p&gt;
&lt;p&gt;Router factory is intended to give you a really simple user interface to use OpenAPI 3 support. Most important features are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Async loading of specification and its schema dependencies&lt;/li&gt;
&lt;li&gt;Automatic convert OpenAPI style paths to Vert.x style paths&lt;/li&gt;
&lt;li&gt;Lazy methods: operations (combination of paths and HTTP methods) are mounted in definition order inside specification&lt;/li&gt;
&lt;li&gt;Automatic mount of security validation handlers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, it‚Äôs planned to release a &lt;strong&gt;project skeleton generator&lt;/strong&gt; based on API spec.&lt;/p&gt;
&lt;h2 id=&quot;startup-your-project&quot;&gt;Startup your project&lt;/h2&gt;
&lt;p&gt;We are in a testing stage, so the vertx-web official repo doesn‚Äôt contain it. To include the modified version of vertx-web replace your vertx-web maven dependency with this one:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.github.slinkydeveloper&lt;span class=&quot;hljs-tag&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;vertx-web&lt;span class=&quot;hljs-tag&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;89d6254d50&lt;span class=&quot;hljs-tag&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
Then you have to add this maven repository in your `pom.xml`
&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;repositories&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;repository&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;jitpack.io&lt;span class=&quot;hljs-tag&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;url&lt;/span&gt;&amp;gt;&lt;/span&gt;https://jitpack.io&lt;span class=&quot;hljs-tag&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;url&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;repository&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&lt;span class=&quot;hljs-title&quot;&gt;repositories&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use it with &lt;a href=&quot;https://jitpack.io/#slinkydeveloper/vertx-web/designdriven-SNAPSHOT&quot;&gt;gradle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now you can start using OpenAPI 3 inside your Vert.x powered app!&lt;/p&gt;
&lt;p&gt;First of all you need to load the specification and construct the router factory:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Load the api spec. This operation is asynchronous&lt;/span&gt;
OpenAPI3RouterFactory.createRouterFactoryFromFile(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.vertx, &lt;span class=&quot;hljs-string&quot;&gt;&quot;src/main/resources/petstore.yaml&quot;&lt;/span&gt;, ar -&amp;gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
        &lt;span class=&quot;hljs-comment&quot;&gt;// Spec loaded with success&lt;/span&gt;
        OpenAPI3RouterFactory routerFactory = ar.result();
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        &lt;span class=&quot;hljs-comment&quot;&gt;// Something went wrong during router factory initialization&lt;/span&gt;
        Throwable exception = ar.cause();
        logger.error(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Ops!&quot;&lt;/span&gt;, exception);
    }
});&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;handlers-mounting&quot;&gt;Handlers mounting&lt;/h2&gt;
&lt;p&gt;Now load your first path. There are two functions to load the handlers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;addHandler(HttpMethod method, String path, Handler handler, Handler failureHandler)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;addHandlerByOperationId(String operationId, Handler handler, Handler failureHandler)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This two functions wants an handler and a failure handler. You can, of course, &lt;strong&gt;add multiple handlers to same operation&lt;/strong&gt;, without overwrite the existing ones.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;admonition-block important&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;admonition-icon&quot;&gt;&lt;i class=&quot;admonition-icon fa fa-exclamation-circle&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&quot;content&quot;&gt;&lt;span class=&quot;title&quot;&gt;Add operations with operationId &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;content&quot;&gt; Usage of combination of path and HTTP method is allowed, but it‚Äôs better to add operations handlers with operationId, for performance reasons and to avoid paths nomenclature errors&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;This is an example of &lt;code&gt;addHandlerByOperationId()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Add an handler with operationId&lt;/span&gt;
routerFactory.addHandlerByOperationId(&lt;span class=&quot;hljs-string&quot;&gt;&quot;listPets&quot;&lt;/span&gt;, routingContext -&amp;gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle listPets operation (GET /pets)&lt;/span&gt;
}, routingContext -&amp;gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle failure&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is an example of &lt;code&gt;addHandler&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Add an handler with a combination of HttpMethod and path&lt;/span&gt;
routerFactory.addHandler(HttpMethod.POST, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/pets&quot;&lt;/span&gt;, routingContext -&amp;gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle /pets POST operation&lt;/span&gt;
}, routingContext -&amp;gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle failure&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;request-parameters&quot;&gt;Request parameters&lt;/h2&gt;
&lt;p&gt;Now you can freely use request parameters. To get the &lt;code&gt;RequestParameters&lt;/code&gt; object:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;RequestParameters params = routingContext.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;parsedParameters&quot;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;RequestParameters&lt;/code&gt; object provides all methods to access to query, cookie, header, path, form and entire body parameters. Here are some examples of how to use this object.&lt;/p&gt;
&lt;p&gt;Parameter with name &lt;code&gt;awesomeParameter&lt;/code&gt; with type &lt;code&gt;integer&lt;/code&gt; in &lt;code&gt;query&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;RequestParameter awesomeParameter = params.queryParameter(&lt;span class=&quot;hljs-string&quot;&gt;&quot;awesomeParameter&quot;&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (awesomeParameter != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {
    &lt;span class=&quot;hljs-comment&quot;&gt;// awesomeParameter parameter exists, but we are not sure that is empty or not (query parameters can be empty with allowEmptyValue: true)&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!awesomeParameter.isEmpty()) {
      &lt;span class=&quot;hljs-comment&quot;&gt;// Now we are sure that it exists and it's not empty, so we can extract it&lt;/span&gt;
      Integer awesome = awesomeParameter.getInteger();
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
      &lt;span class=&quot;hljs-comment&quot;&gt;// Parameter exists, but it's empty value&lt;/span&gt;
    }
} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Parameter doesn't exist (it's not required)&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, every parameter is mapped in respective objects (&lt;code&gt;integer&lt;/code&gt; in &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;integer&lt;/code&gt; with &lt;code&gt;format: int64&lt;/code&gt; in &lt;code&gt;Long&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt; in &lt;code&gt;Float&lt;/code&gt; and so on)&lt;/p&gt;
&lt;p&gt;Comma separated array with name &lt;code&gt;awesomeParameters&lt;/code&gt; with type &lt;code&gt;integer&lt;/code&gt; in &lt;code&gt;query&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;RequestParameter awesomeParameters = params.queryParameter(&lt;span class=&quot;hljs-string&quot;&gt;&quot;awesomeParameters&quot;&lt;/span&gt;);
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (awesomeParameters != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !awesomeParameters.isEmpty()) {
    List awesomeList = awesomeParameters.getArray();
    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (RequestParameter awesome : awesomeList) {
      Integer a = awesome.getInteger();
    }
} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// awesomeParameters not found or empty string&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JSON Body:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;RequestParameter body = params.body();
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (body != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;)
  JsonObject jsonBody = body.getJsonObject();&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;security-handling&quot;&gt;Security handling&lt;/h2&gt;
&lt;p&gt;You can mount only one security handler for a combination of schema and scope.&lt;/p&gt;
&lt;p&gt;To add a security handler only with a schema name:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;routerFactory.addSecurityHandler(&lt;span class=&quot;hljs-string&quot;&gt;&quot;security_scheme_name&quot;&lt;/span&gt;, routingContext -&amp;gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle security here and then call next()&lt;/span&gt;
    routingContext.next();
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To add a security handler with a combination of schema name and scope:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;routerFactory.addSecuritySchemaScopeValidator(&lt;span class=&quot;hljs-string&quot;&gt;&quot;security_scheme_name&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;scope_name&quot;&lt;/span&gt;, routingContext -&amp;gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle security here and then call next()&lt;/span&gt;
    routingContext.next();
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;admonition-block note&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;admonition-icon&quot;&gt;&lt;i class=&quot;admonition-icon fa fa-comment&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&quot;content&quot;&gt;&lt;span class=&quot;title&quot;&gt;You can define security handlers where you want but define it! &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;content&quot;&gt; During Router instantiation, if factory finds a path that require a security schema without an assigned handler, It will throw a &lt;code&gt;RouterFactoryException&lt;/code&gt; &lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;error-handling&quot;&gt;Error handling&lt;/h2&gt;
&lt;p&gt;Every time you add an handler for an operation you can add a failure handler. To handle a &lt;code&gt;ValidationException&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;Throwable failure = routingContext.failure();
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (failure &lt;span class=&quot;hljs-keyword&quot;&gt;instanceof&lt;/span&gt; ValidationException)
    &lt;span class=&quot;hljs-comment&quot;&gt;// Handle Validation Exception&lt;/span&gt;
    routingContext.response().setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;400&lt;/span&gt;).setStatusMessage(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ValidationError&quot;&lt;/span&gt;).end(failure.getMessage());&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also the router factory provides two other tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It automatically mounts a 501 &lt;code&gt;Not Implemented&lt;/code&gt; handler for operations where you haven‚Äôt mounted any handler&lt;/li&gt;
&lt;li&gt;It can load a default &lt;code&gt;ValidationException&lt;/code&gt; failure handler (You can enable this feature via &lt;code&gt;routerFactory.enableValidationFailureHandler(true)&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;and-now-use-it-&quot;&gt;And now use it!&lt;/h2&gt;
&lt;p&gt;Now you are ready to generate the &lt;code&gt;Router&lt;/code&gt;!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;Router router = routerFactory.getRouter();

&lt;span class=&quot;hljs-comment&quot;&gt;// Now you can use your Router instance&lt;/span&gt;
HttpServer server = vertx.createHttpServer(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HttpServerOptions().setPort(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;).setHost(&lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;));
server.requestHandler(router::accept).listen();&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;admonition-block note&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;admonition-icon&quot;&gt;&lt;i class=&quot;admonition-icon fa fa-comment&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&quot;content&quot;&gt;&lt;span class=&quot;title&quot;&gt;Lazy methods! &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;content&quot;&gt; &lt;code&gt;getRouter()&lt;/code&gt; generate the &lt;code&gt;Router&lt;/code&gt; object, so you don‚Äôt have to care about code definition order&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;and-now-&quot;&gt;And now?&lt;/h2&gt;
&lt;p&gt;You can find a complete example here: &lt;a href=&quot;https://gist.github.com/slinkydeveloper/bdf5929c2506988d78fc08205089409a&quot;&gt;OpenAPI 3 Vert.x example gists&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can access to documentation (WIP) &lt;a href=&quot;https://github.com/slinkydeveloper/vertx-web/blob/designdriven/vertx-web/src/main/asciidoc/java/index.adoc#openapi-3&quot;&gt;here&lt;/a&gt; (for others languages, check out &lt;a href=&quot;https://github.com/slinkydeveloper/vertx-web/tree/designdriven/vertx-web/src/main/asciidoc&quot;&gt;here&lt;/a&gt;), but you can also check Javadoc inside code. These are the most important ones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/slinkydeveloper/vertx-web/blob/designdriven/vertx-web/src/main/java/io/vertx/ext/web/designdriven/DesignDrivenRouterFactory.java&quot;&gt;DesignDrivenRouterFactory (Base interface of OpenAPI3RouterFactory)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/slinkydeveloper/vertx-web/blob/designdriven/vertx-web/src/main/java/io/vertx/ext/web/designdriven/OpenAPI3RouterFactory.java&quot;&gt;OpenAPI3RouterFactory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/slinkydeveloper/vertx-web/blob/designdriven/vertx-web/src/main/java/io/vertx/ext/web/RequestParameters.java&quot;&gt;RequestParameters (container of all parameters)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/slinkydeveloper/vertx-web/blob/designdriven/vertx-web/src/main/java/io/vertx/ext/web/RequestParameter.java&quot;&gt;RequestParameter (container of a parameter instance)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/slinkydeveloper/vertx-web/blob/designdriven/vertx-web/src/main/java/io/vertx/ext/web/validation/ValidationException.java&quot;&gt;ValidationException&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Follow &lt;a href=&quot;https://github.com/slinkydeveloper/vertx-web&quot;&gt;my fork of vertx-web project&lt;/a&gt; to get last updates.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;admonition-block important&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;admonition-icon&quot;&gt;&lt;i class=&quot;admonition-icon fa fa-exclamation-circle&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&quot;content&quot;&gt;&lt;span class=&quot;title&quot;&gt;We want you! &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;content&quot;&gt; Please give us your feedback opening an issue &lt;a href=&quot;https://github.com/slinkydeveloper/vertx-web/issues&quot;&gt;here&lt;/a&gt; &lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Tue, 04 Jul 2017 00:00:00 +0000</pubDate>
</item>

</channel>
</rss>
